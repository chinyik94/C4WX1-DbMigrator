// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace C4WX1_DbMigrator.Models;

public partial class THCC_C4WDEVContext : DbContext
{
    public THCC_C4WDEVContext(DbContextOptions<THCC_C4WDEVContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AMTQuestion> AMTQuestions { get; set; }

    public virtual DbSet<APIAccessKey> APIAccessKeys { get; set; }

    public virtual DbSet<APIMonitor> APIMonitors { get; set; }

    public virtual DbSet<APIOrder> APIOrders { get; set; }

    public virtual DbSet<APIOrderAllergy> APIOrderAllergies { get; set; }

    public virtual DbSet<APIOrderDiagnosis> APIOrderDiagnoses { get; set; }

    public virtual DbSet<APIOrderMedication> APIOrderMedications { get; set; }

    public virtual DbSet<APIOrderTask> APIOrderTasks { get; set; }

    public virtual DbSet<APNSNotification> APNSNotifications { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<AuditTrail> AuditTrails { get; set; }

    public virtual DbSet<Audit_AMTQuestion> Audit_AMTQuestions { get; set; }

    public virtual DbSet<Audit_APIAccessKey> Audit_APIAccessKeys { get; set; }

    public virtual DbSet<Audit_APIMonitor> Audit_APIMonitors { get; set; }

    public virtual DbSet<Audit_APIOrder> Audit_APIOrders { get; set; }

    public virtual DbSet<Audit_APIOrderAllergy> Audit_APIOrderAllergies { get; set; }

    public virtual DbSet<Audit_APIOrderDiagnosis> Audit_APIOrderDiagnoses { get; set; }

    public virtual DbSet<Audit_APIOrderMedication> Audit_APIOrderMedications { get; set; }

    public virtual DbSet<Audit_APIOrderTask> Audit_APIOrderTasks { get; set; }

    public virtual DbSet<Audit_APNSNotification> Audit_APNSNotifications { get; set; }

    public virtual DbSet<Audit_Activity> Audit_Activities { get; set; }

    public virtual DbSet<Audit_BillingInvoice> Audit_BillingInvoices { get; set; }

    public virtual DbSet<Audit_BillingInvoiceConsumable> Audit_BillingInvoiceConsumables { get; set; }

    public virtual DbSet<Audit_BillingInvoiceService> Audit_BillingInvoiceServices { get; set; }

    public virtual DbSet<Audit_BillingPackage> Audit_BillingPackages { get; set; }

    public virtual DbSet<Audit_BillingPackageInformation> Audit_BillingPackageInformations { get; set; }

    public virtual DbSet<Audit_BillingPackageRequest> Audit_BillingPackageRequests { get; set; }

    public virtual DbSet<Audit_BillingProposal> Audit_BillingProposals { get; set; }

    public virtual DbSet<Audit_BillingProposalService> Audit_BillingProposalServices { get; set; }

    public virtual DbSet<Audit_BillingService> Audit_BillingServices { get; set; }

    public virtual DbSet<Audit_Branch> Audit_Branches { get; set; }

    public virtual DbSet<Audit_C4WDeviceToken> Audit_C4WDeviceTokens { get; set; }

    public virtual DbSet<Audit_CPGoal> Audit_CPGoals { get; set; }

    public virtual DbSet<Audit_CarePlan> Audit_CarePlans { get; set; }

    public virtual DbSet<Audit_CarePlanDetail> Audit_CarePlanDetails { get; set; }

    public virtual DbSet<Audit_CarePlanStatus> Audit_CarePlanStatuses { get; set; }

    public virtual DbSet<Audit_CarePlanSub> Audit_CarePlanSubs { get; set; }

    public virtual DbSet<Audit_CarePlanSubActivity> Audit_CarePlanSubActivities { get; set; }

    public virtual DbSet<Audit_CarePlanSubCPGoal> Audit_CarePlanSubCPGoals { get; set; }

    public virtual DbSet<Audit_CarePlanSubGoal> Audit_CarePlanSubGoals { get; set; }

    public virtual DbSet<Audit_CarePlanSubIntervention> Audit_CarePlanSubInterventions { get; set; }

    public virtual DbSet<Audit_CarePlanSubProblemList> Audit_CarePlanSubProblemLists { get; set; }

    public virtual DbSet<Audit_CarePlanSubProblemListGoal> Audit_CarePlanSubProblemListGoals { get; set; }

    public virtual DbSet<Audit_CareReport> Audit_CareReports { get; set; }

    public virtual DbSet<Audit_CareReportConfig> Audit_CareReportConfigs { get; set; }

    public virtual DbSet<Audit_CareReportRehabilitation> Audit_CareReportRehabilitations { get; set; }

    public virtual DbSet<Audit_CareReportSocialSupport> Audit_CareReportSocialSupports { get; set; }

    public virtual DbSet<Audit_CareReportSystemInfo> Audit_CareReportSystemInfos { get; set; }

    public virtual DbSet<Audit_Chat> Audit_Chats { get; set; }

    public virtual DbSet<Audit_Code> Audit_Codes { get; set; }

    public virtual DbSet<Audit_CodeType> Audit_CodeTypes { get; set; }

    public virtual DbSet<Audit_Diagnosis> Audit_Diagnoses { get; set; }

    public virtual DbSet<Audit_DischargeSummaryReport> Audit_DischargeSummaryReports { get; set; }

    public virtual DbSet<Audit_DischargeSummaryReportAttachment> Audit_DischargeSummaryReportAttachments { get; set; }

    public virtual DbSet<Audit_Disease> Audit_Diseases { get; set; }

    public virtual DbSet<Audit_DiseaseInfo> Audit_DiseaseInfos { get; set; }

    public virtual DbSet<Audit_DiseaseSubInfo> Audit_DiseaseSubInfos { get; set; }

    public virtual DbSet<Audit_DiseaseVitalSignType> Audit_DiseaseVitalSignTypes { get; set; }

    public virtual DbSet<Audit_EBASDEPQuestion> Audit_EBASDEPQuestions { get; set; }

    public virtual DbSet<Audit_Enquiry> Audit_Enquiries { get; set; }

    public virtual DbSet<Audit_EnquiryAttachment> Audit_EnquiryAttachments { get; set; }

    public virtual DbSet<Audit_EnquiryConfig> Audit_EnquiryConfigs { get; set; }

    public virtual DbSet<Audit_EnquiryEscPerson> Audit_EnquiryEscPeople { get; set; }

    public virtual DbSet<Audit_EnquiryLanguage> Audit_EnquiryLanguages { get; set; }

    public virtual DbSet<Audit_EnquirySCM> Audit_EnquirySCMs { get; set; }

    public virtual DbSet<Audit_EnquiryServicesRequired> Audit_EnquiryServicesRequireds { get; set; }

    public virtual DbSet<Audit_Event> Audit_Events { get; set; }

    public virtual DbSet<Audit_EventUser> Audit_EventUsers { get; set; }

    public virtual DbSet<Audit_EventUserLog> Audit_EventUserLogs { get; set; }

    public virtual DbSet<Audit_ExternalDoctor> Audit_ExternalDoctors { get; set; }

    public virtual DbSet<Audit_GeoFencing> Audit_GeoFencings { get; set; }

    public virtual DbSet<Audit_Group> Audit_Groups { get; set; }

    public virtual DbSet<Audit_GroupRole> Audit_GroupRoles { get; set; }

    public virtual DbSet<Audit_ICAWoundCare> Audit_ICAWoundCares { get; set; }

    public virtual DbSet<Audit_InitialCareAssessment> Audit_InitialCareAssessments { get; set; }

    public virtual DbSet<Audit_InitialCareAssessmentAttachment> Audit_InitialCareAssessmentAttachments { get; set; }

    public virtual DbSet<Audit_InitialCareAssessmentSpecialInstruction> Audit_InitialCareAssessmentSpecialInstructions { get; set; }

    public virtual DbSet<Audit_InitialCareAssessmentVitalSign> Audit_InitialCareAssessmentVitalSigns { get; set; }

    public virtual DbSet<Audit_Intervention> Audit_Interventions { get; set; }

    public virtual DbSet<Audit_Item> Audit_Items { get; set; }

    public virtual DbSet<Audit_ItemStock> Audit_ItemStocks { get; set; }

    public virtual DbSet<Audit_LoginDevice> Audit_LoginDevices { get; set; }

    public virtual DbSet<Audit_MailSetting> Audit_MailSettings { get; set; }

    public virtual DbSet<Audit_MedicationVitalSignType> Audit_MedicationVitalSignTypes { get; set; }

    public virtual DbSet<Audit_MobileAppVersioning> Audit_MobileAppVersionings { get; set; }

    public virtual DbSet<Audit_MultiDisciplinaryMeeting> Audit_MultiDisciplinaryMeetings { get; set; }

    public virtual DbSet<Audit_MultiDisciplinaryMeetingDetail> Audit_MultiDisciplinaryMeetingDetails { get; set; }

    public virtual DbSet<Audit_Notification> Audit_Notifications { get; set; }

    public virtual DbSet<Audit_NotificationChat> Audit_NotificationChats { get; set; }

    public virtual DbSet<Audit_NotificationEvent> Audit_NotificationEvents { get; set; }

    public virtual DbSet<Audit_NotificationMessageTemplate> Audit_NotificationMessageTemplates { get; set; }

    public virtual DbSet<Audit_NotificationTask> Audit_NotificationTasks { get; set; }

    public virtual DbSet<Audit_NotificationVitalSignDetail> Audit_NotificationVitalSignDetails { get; set; }

    public virtual DbSet<Audit_NutritionTask> Audit_NutritionTasks { get; set; }

    public virtual DbSet<Audit_NutritionTaskReference> Audit_NutritionTaskReferences { get; set; }

    public virtual DbSet<Audit_Otp> Audit_Otps { get; set; }

    public virtual DbSet<Audit_Package> Audit_Packages { get; set; }

    public virtual DbSet<Audit_Patient> Audit_Patients { get; set; }

    public virtual DbSet<Audit_PatientAMT> Audit_PatientAMTs { get; set; }

    public virtual DbSet<Audit_PatientAMTAnswer> Audit_PatientAMTAnswers { get; set; }

    public virtual DbSet<Audit_PatientAccessLine> Audit_PatientAccessLines { get; set; }

    public virtual DbSet<Audit_PatientAdditionalInfo> Audit_PatientAdditionalInfos { get; set; }

    public virtual DbSet<Audit_PatientAttachment> Audit_PatientAttachments { get; set; }

    public virtual DbSet<Audit_PatientBradenScale> Audit_PatientBradenScales { get; set; }

    public virtual DbSet<Audit_PatientClinician> Audit_PatientClinicians { get; set; }

    public virtual DbSet<Audit_PatientDrugAllergy> Audit_PatientDrugAllergies { get; set; }

    public virtual DbSet<Audit_PatientEBASDEP> Audit_PatientEBASDEPs { get; set; }

    public virtual DbSet<Audit_PatientEBASDEPAnswer> Audit_PatientEBASDEPAnswers { get; set; }

    public virtual DbSet<Audit_PatientFamilyHistory> Audit_PatientFamilyHistories { get; set; }

    public virtual DbSet<Audit_PatientGC> Audit_PatientGCs { get; set; }

    public virtual DbSet<Audit_PatientImmunisation> Audit_PatientImmunisations { get; set; }

    public virtual DbSet<Audit_PatientLanguage> Audit_PatientLanguages { get; set; }

    public virtual DbSet<Audit_PatientMBI> Audit_PatientMBIs { get; set; }

    public virtual DbSet<Audit_PatientMF> Audit_PatientMFs { get; set; }

    public virtual DbSet<Audit_PatientMMSE> Audit_PatientMMSEs { get; set; }

    public virtual DbSet<Audit_PatientMedicalHistory> Audit_PatientMedicalHistories { get; set; }

    public virtual DbSet<Audit_PatientMedication> Audit_PatientMedications { get; set; }

    public virtual DbSet<Audit_PatientMedicationConsume> Audit_PatientMedicationConsumes { get; set; }

    public virtual DbSet<Audit_PatientMedicationConsumeAttachment> Audit_PatientMedicationConsumeAttachments { get; set; }

    public virtual DbSet<Audit_PatientMedicationSupply> Audit_PatientMedicationSupplies { get; set; }

    public virtual DbSet<Audit_PatientNutrition> Audit_PatientNutritions { get; set; }

    public virtual DbSet<Audit_PatientOtherAllergy> Audit_PatientOtherAllergies { get; set; }

    public virtual DbSet<Audit_PatientPackage> Audit_PatientPackages { get; set; }

    public virtual DbSet<Audit_PatientProfile> Audit_PatientProfiles { get; set; }

    public virtual DbSet<Audit_PatientRAF> Audit_PatientRAFs { get; set; }

    public virtual DbSet<Audit_PatientReferral> Audit_PatientReferrals { get; set; }

    public virtual DbSet<Audit_PatientReferralService> Audit_PatientReferralServices { get; set; }

    public virtual DbSet<Audit_PatientSocialSupport> Audit_PatientSocialSupports { get; set; }

    public virtual DbSet<Audit_PatientSpecialIndicator> Audit_PatientSpecialIndicators { get; set; }

    public virtual DbSet<Audit_PatientWound> Audit_PatientWounds { get; set; }

    public virtual DbSet<Audit_PatientWoundDraft> Audit_PatientWoundDrafts { get; set; }

    public virtual DbSet<Audit_PatientWoundReviewBy> Audit_PatientWoundReviewBies { get; set; }

    public virtual DbSet<Audit_PatientWoundVisit> Audit_PatientWoundVisits { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitAppearance> Audit_PatientWoundVisitAppearances { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitCleansingItem> Audit_PatientWoundVisitCleansingItems { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitClinician> Audit_PatientWoundVisitClinicians { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitTreatment> Audit_PatientWoundVisitTreatments { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitTreatmentList> Audit_PatientWoundVisitTreatmentLists { get; set; }

    public virtual DbSet<Audit_PatientWoundVisitTreatmentObjective> Audit_PatientWoundVisitTreatmentObjectives { get; set; }

    public virtual DbSet<Audit_ProblemList> Audit_ProblemLists { get; set; }

    public virtual DbSet<Audit_ProblemListGoal> Audit_ProblemListGoals { get; set; }

    public virtual DbSet<Audit_Receipt> Audit_Receipts { get; set; }

    public virtual DbSet<Audit_ReceiptForInvoice> Audit_ReceiptForInvoices { get; set; }

    public virtual DbSet<Audit_RegisteredDevice> Audit_RegisteredDevices { get; set; }

    public virtual DbSet<Audit_RegisteredDeviceV2> Audit_RegisteredDeviceV2s { get; set; }

    public virtual DbSet<Audit_ResidentAssessmentCategory> Audit_ResidentAssessmentCategories { get; set; }

    public virtual DbSet<Audit_Role> Audit_Roles { get; set; }

    public virtual DbSet<Audit_ScheduledTask> Audit_ScheduledTasks { get; set; }

    public virtual DbSet<Audit_ServiceForBilling> Audit_ServiceForBillings { get; set; }

    public virtual DbSet<Audit_ServiceForBillingCost> Audit_ServiceForBillingCosts { get; set; }

    public virtual DbSet<Audit_ServiceSkillset> Audit_ServiceSkillsets { get; set; }

    public virtual DbSet<Audit_SyncPatientLog> Audit_SyncPatientLogs { get; set; }

    public virtual DbSet<Audit_SyncWoundLog> Audit_SyncWoundLogs { get; set; }

    public virtual DbSet<Audit_SyncWoundVisitLog> Audit_SyncWoundVisitLogs { get; set; }

    public virtual DbSet<Audit_SysConfig> Audit_SysConfigs { get; set; }

    public virtual DbSet<Audit_SystemForDisease> Audit_SystemForDiseases { get; set; }

    public virtual DbSet<Audit_TD_WoundAssessmentFactor> Audit_TD_WoundAssessmentFactors { get; set; }

    public virtual DbSet<Audit_Task> Audit_Tasks { get; set; }

    public virtual DbSet<Audit_TaskFileAttachment> Audit_TaskFileAttachments { get; set; }

    public virtual DbSet<Audit_TaskServicesRequired> Audit_TaskServicesRequireds { get; set; }

    public virtual DbSet<Audit_TaskSpecificDate> Audit_TaskSpecificDates { get; set; }

    public virtual DbSet<Audit_TaskUser> Audit_TaskUsers { get; set; }

    public virtual DbSet<Audit_TaskUserLog> Audit_TaskUserLogs { get; set; }

    public virtual DbSet<Audit_TaskUserLogAttachment> Audit_TaskUserLogAttachments { get; set; }

    public virtual DbSet<Audit_TeleconsultationRecording> Audit_TeleconsultationRecordings { get; set; }

    public virtual DbSet<Audit_TeleconsultationReport> Audit_TeleconsultationReports { get; set; }

    public virtual DbSet<Audit_Threshold> Audit_Thresholds { get; set; }

    public virtual DbSet<Audit_TreatmentListItem> Audit_TreatmentListItems { get; set; }

    public virtual DbSet<Audit_TreatmentTOL> Audit_TreatmentTOLs { get; set; }

    public virtual DbSet<Audit_Type> Audit_Types { get; set; }

    public virtual DbSet<Audit_UploadFile> Audit_UploadFiles { get; set; }

    public virtual DbSet<Audit_User> Audit_Users { get; set; }

    public virtual DbSet<Audit_UserAddress> Audit_UserAddresses { get; set; }

    public virtual DbSet<Audit_UserBranch> Audit_UserBranches { get; set; }

    public virtual DbSet<Audit_UserCategory> Audit_UserCategories { get; set; }

    public virtual DbSet<Audit_UserCategoryRole> Audit_UserCategoryRoles { get; set; }

    public virtual DbSet<Audit_UserLanguage> Audit_UserLanguages { get; set; }

    public virtual DbSet<Audit_UserOrganization> Audit_UserOrganizations { get; set; }

    public virtual DbSet<Audit_UserRole> Audit_UserRoles { get; set; }

    public virtual DbSet<Audit_UserSkillset> Audit_UserSkillsets { get; set; }

    public virtual DbSet<Audit_UserType> Audit_UserTypes { get; set; }

    public virtual DbSet<Audit_UserUserType> Audit_UserUserTypes { get; set; }

    public virtual DbSet<Audit_VitalSign> Audit_VitalSigns { get; set; }

    public virtual DbSet<Audit_VitalSignDetail> Audit_VitalSignDetails { get; set; }

    public virtual DbSet<Audit_VitalSignRelationship> Audit_VitalSignRelationships { get; set; }

    public virtual DbSet<Audit_VitalSignType> Audit_VitalSignTypes { get; set; }

    public virtual DbSet<Audit_VitalSignTypeThreshold> Audit_VitalSignTypeThresholds { get; set; }

    public virtual DbSet<Audit_WoundConsolidatedEmail> Audit_WoundConsolidatedEmails { get; set; }

    public virtual DbSet<BillingInvoice> BillingInvoices { get; set; }

    public virtual DbSet<BillingInvoiceConsumable> BillingInvoiceConsumables { get; set; }

    public virtual DbSet<BillingInvoiceService> BillingInvoiceServices { get; set; }

    public virtual DbSet<BillingPackage> BillingPackages { get; set; }

    public virtual DbSet<BillingPackageInformation> BillingPackageInformations { get; set; }

    public virtual DbSet<BillingPackageRequest> BillingPackageRequests { get; set; }

    public virtual DbSet<BillingProposal> BillingProposals { get; set; }

    public virtual DbSet<BillingProposalService> BillingProposalServices { get; set; }

    public virtual DbSet<BillingService> BillingServices { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<C4WDeviceToken> C4WDeviceTokens { get; set; }

    public virtual DbSet<C4WImage> C4WImages { get; set; }

    public virtual DbSet<CPGoal> CPGoals { get; set; }

    public virtual DbSet<CarePlan> CarePlans { get; set; }

    public virtual DbSet<CarePlanDetail> CarePlanDetails { get; set; }

    public virtual DbSet<CarePlanStatus> CarePlanStatuses { get; set; }

    public virtual DbSet<CarePlanSub> CarePlanSubs { get; set; }

    public virtual DbSet<CarePlanSubGoal> CarePlanSubGoals { get; set; }

    public virtual DbSet<CarePlanSubProblemList> CarePlanSubProblemLists { get; set; }

    public virtual DbSet<CarePlanSubProblemListGoal> CarePlanSubProblemListGoals { get; set; }

    public virtual DbSet<CareReport> CareReports { get; set; }

    public virtual DbSet<CareReportConfig> CareReportConfigs { get; set; }

    public virtual DbSet<CareReportRehabilitation> CareReportRehabilitations { get; set; }

    public virtual DbSet<CareReportSocialSupport> CareReportSocialSupports { get; set; }

    public virtual DbSet<CareReportSystemInfo> CareReportSystemInfos { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<Code> Codes { get; set; }

    public virtual DbSet<CodeType> CodeTypes { get; set; }

    public virtual DbSet<Diagnosis> Diagnoses { get; set; }

    public virtual DbSet<DischargeSummaryReport> DischargeSummaryReports { get; set; }

    public virtual DbSet<DischargeSummaryReportAttachment> DischargeSummaryReportAttachments { get; set; }

    public virtual DbSet<Disease> Diseases { get; set; }

    public virtual DbSet<DiseaseInfo> DiseaseInfos { get; set; }

    public virtual DbSet<DiseaseSubInfo> DiseaseSubInfos { get; set; }

    public virtual DbSet<DiseaseVitalSignType> DiseaseVitalSignTypes { get; set; }

    public virtual DbSet<EBASDEPQuestion> EBASDEPQuestions { get; set; }

    public virtual DbSet<EmailLog> EmailLogs { get; set; }

    public virtual DbSet<Enquiry> Enquiries { get; set; }

    public virtual DbSet<EnquiryAttachment> EnquiryAttachments { get; set; }

    public virtual DbSet<EnquiryConfig> EnquiryConfigs { get; set; }

    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventUser> EventUsers { get; set; }

    public virtual DbSet<EventUserLog> EventUserLogs { get; set; }

    public virtual DbSet<ExternalDoctor> ExternalDoctors { get; set; }

    public virtual DbSet<Facility> Facilities { get; set; }

    public virtual DbSet<GeoFencing> GeoFencings { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupRole> GroupRoles { get; set; }

    public virtual DbSet<InitialCareAssessment> InitialCareAssessments { get; set; }

    public virtual DbSet<InitialCareAssessmentAttachment> InitialCareAssessmentAttachments { get; set; }

    public virtual DbSet<InitialCareAssessmentSpecialInstruction> InitialCareAssessmentSpecialInstructions { get; set; }

    public virtual DbSet<InitialCareAssessmentVitalSign> InitialCareAssessmentVitalSigns { get; set; }

    public virtual DbSet<IntegrationApiRequestLog> IntegrationApiRequestLogs { get; set; }

    public virtual DbSet<Intervention> Interventions { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemStock> ItemStocks { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LoginDevice> LoginDevices { get; set; }

    public virtual DbSet<MailSetting> MailSettings { get; set; }

    public virtual DbSet<MedicationVitalSignType> MedicationVitalSignTypes { get; set; }

    public virtual DbSet<MobileAppVersioning> MobileAppVersionings { get; set; }

    public virtual DbSet<MultiDisciplinaryMeeting> MultiDisciplinaryMeetings { get; set; }

    public virtual DbSet<MultiDisciplinaryMeetingDetail> MultiDisciplinaryMeetingDetails { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationChat> NotificationChats { get; set; }

    public virtual DbSet<NotificationEvent> NotificationEvents { get; set; }

    public virtual DbSet<NotificationMessageTemplate> NotificationMessageTemplates { get; set; }

    public virtual DbSet<NotificationTask> NotificationTasks { get; set; }

    public virtual DbSet<NotificationVitalSignDetail> NotificationVitalSignDetails { get; set; }

    public virtual DbSet<NutritionTask> NutritionTasks { get; set; }

    public virtual DbSet<NutritionTaskReference> NutritionTaskReferences { get; set; }

    public virtual DbSet<Otp> Otps { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<PatientAMT> PatientAMTs { get; set; }

    public virtual DbSet<PatientAMTAnswer> PatientAMTAnswers { get; set; }

    public virtual DbSet<PatientAccessLine> PatientAccessLines { get; set; }

    public virtual DbSet<PatientAdditionalInfo> PatientAdditionalInfos { get; set; }

    public virtual DbSet<PatientAttachment> PatientAttachments { get; set; }

    public virtual DbSet<PatientBradenScale> PatientBradenScales { get; set; }

    public virtual DbSet<PatientClinician> PatientClinicians { get; set; }

    public virtual DbSet<PatientDrugAllergy> PatientDrugAllergies { get; set; }

    public virtual DbSet<PatientEBASDEP> PatientEBASDEPs { get; set; }

    public virtual DbSet<PatientEBASDEPAnswer> PatientEBASDEPAnswers { get; set; }

    public virtual DbSet<PatientFamilyHistory> PatientFamilyHistories { get; set; }

    public virtual DbSet<PatientGC> PatientGCs { get; set; }

    public virtual DbSet<PatientImmunisation> PatientImmunisations { get; set; }

    public virtual DbSet<PatientMBI> PatientMBIs { get; set; }

    public virtual DbSet<PatientMF> PatientMFs { get; set; }

    public virtual DbSet<PatientMMSE> PatientMMSEs { get; set; }

    public virtual DbSet<PatientMedicalHistory> PatientMedicalHistories { get; set; }

    public virtual DbSet<PatientMedication> PatientMedications { get; set; }

    public virtual DbSet<PatientMedicationConsume> PatientMedicationConsumes { get; set; }

    public virtual DbSet<PatientMedicationConsumeAttachment> PatientMedicationConsumeAttachments { get; set; }

    public virtual DbSet<PatientNutrition> PatientNutritions { get; set; }

    public virtual DbSet<PatientOtherAllergy> PatientOtherAllergies { get; set; }

    public virtual DbSet<PatientProfile> PatientProfiles { get; set; }

    public virtual DbSet<PatientRAF> PatientRAFs { get; set; }

    public virtual DbSet<PatientReferral> PatientReferrals { get; set; }

    public virtual DbSet<PatientSocialSupport> PatientSocialSupports { get; set; }

    public virtual DbSet<PatientWound> PatientWounds { get; set; }

    public virtual DbSet<PatientWoundDraft> PatientWoundDrafts { get; set; }

    public virtual DbSet<PatientWoundDraftTreatmentList> PatientWoundDraftTreatmentLists { get; set; }

    public virtual DbSet<PatientWoundReviewBy> PatientWoundReviewBies { get; set; }

    public virtual DbSet<PatientWoundVisit> PatientWoundVisits { get; set; }

    public virtual DbSet<PatientWoundVisitClinician> PatientWoundVisitClinicians { get; set; }

    public virtual DbSet<PatientWoundVisitTreatment> PatientWoundVisitTreatments { get; set; }

    public virtual DbSet<PatientWoundVisitTreatmentList> PatientWoundVisitTreatmentLists { get; set; }

    public virtual DbSet<ProblemList> ProblemLists { get; set; }

    public virtual DbSet<ProblemListGoal> ProblemListGoals { get; set; }

    public virtual DbSet<Receipt> Receipts { get; set; }

    public virtual DbSet<ReceiptForInvoice> ReceiptForInvoices { get; set; }

    public virtual DbSet<RecentView> RecentViews { get; set; }

    public virtual DbSet<RegisteredDevice> RegisteredDevices { get; set; }

    public virtual DbSet<RegisteredDeviceV2> RegisteredDeviceV2s { get; set; }

    public virtual DbSet<ResidentAssessmentCategory> ResidentAssessmentCategories { get; set; }

    public virtual DbSet<Resource> Resources { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ScheduledTask> ScheduledTasks { get; set; }

    public virtual DbSet<ServiceForBilling> ServiceForBillings { get; set; }

    public virtual DbSet<ServiceForBillingCost> ServiceForBillingCosts { get; set; }

    public virtual DbSet<SyncPatientLog> SyncPatientLogs { get; set; }

    public virtual DbSet<SyncWoundLog> SyncWoundLogs { get; set; }

    public virtual DbSet<SyncWoundVisitLog> SyncWoundVisitLogs { get; set; }

    public virtual DbSet<SysConfig> SysConfigs { get; set; }

    public virtual DbSet<SystemForDisease> SystemForDiseases { get; set; }

    public virtual DbSet<TD_WoundAssessmentFactor> TD_WoundAssessmentFactors { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskFileAttachment> TaskFileAttachments { get; set; }

    public virtual DbSet<TaskSpecificDate> TaskSpecificDates { get; set; }

    public virtual DbSet<TaskUser> TaskUsers { get; set; }

    public virtual DbSet<TaskUserLog> TaskUserLogs { get; set; }

    public virtual DbSet<TaskUserLogAttachment> TaskUserLogAttachments { get; set; }

    public virtual DbSet<TeleconsultationRecording> TeleconsultationRecordings { get; set; }

    public virtual DbSet<TeleconsultationReport> TeleconsultationReports { get; set; }

    public virtual DbSet<Threshold> Thresholds { get; set; }

    public virtual DbSet<TreatmentListItem> TreatmentListItems { get; set; }

    public virtual DbSet<TreatmentTOL> TreatmentTOLs { get; set; }

    public virtual DbSet<Type> Types { get; set; }

    public virtual DbSet<UUIDLog> UUIDLogs { get; set; }

    public virtual DbSet<UploadFile> UploadFiles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAddress> UserAddresses { get; set; }

    public virtual DbSet<UserCategory> UserCategories { get; set; }

    public virtual DbSet<UserCategoryRole> UserCategoryRoles { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<VitalSign> VitalSigns { get; set; }

    public virtual DbSet<VitalSignDetail> VitalSignDetails { get; set; }

    public virtual DbSet<VitalSignRelationship> VitalSignRelationships { get; set; }

    public virtual DbSet<VitalSignType> VitalSignTypes { get; set; }

    public virtual DbSet<VitalSignTypeThreshold> VitalSignTypeThresholds { get; set; }

    public virtual DbSet<WoundConsolidatedEmail> WoundConsolidatedEmails { get; set; }

    public virtual DbSet<WoundUserCategoryParentChild> WoundUserCategoryParentChildren { get; set; }

    public virtual DbSet<vw_AssessmentDue> vw_AssessmentDues { get; set; }

    public virtual DbSet<vw_CarePlanSetup> vw_CarePlanSetups { get; set; }

    public virtual DbSet<vw_CarePlanSystemDisease> vw_CarePlanSystemDiseases { get; set; }

    public virtual DbSet<vw_DBSize> vw_DBSizes { get; set; }

    public virtual DbSet<vw_Doctor> vw_Doctors { get; set; }

    public virtual DbSet<vw_FalangaScore> vw_FalangaScores { get; set; }

    public virtual DbSet<vw_FalangaScores_WoundDraft> vw_FalangaScores_WoundDrafts { get; set; }

    public virtual DbSet<vw_PatientAllLatestVitalSign> vw_PatientAllLatestVitalSigns { get; set; }

    public virtual DbSet<vw_PatientBilling> vw_PatientBillings { get; set; }

    public virtual DbSet<vw_PatientDisease> vw_PatientDiseases { get; set; }

    public virtual DbSet<vw_PatientLatestVitalSign> vw_PatientLatestVitalSigns { get; set; }

    public virtual DbSet<vw_PatientWound> vw_PatientWounds { get; set; }

    public virtual DbSet<vw_PatientWoundImageDownload> vw_PatientWoundImageDownloads { get; set; }

    public virtual DbSet<vw_PushScore> vw_PushScores { get; set; }

    public virtual DbSet<vw_Teleconsultation> vw_Teleconsultations { get; set; }

    public virtual DbSet<vw_UserRole> vw_UserRoles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AI");

        modelBuilder.Entity<AMTQuestion>(entity =>
        {
            entity.ToTable("AMTQuestion", tb => tb.HasTrigger("tr_AMTQuestion"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<APIAccessKey>(entity =>
        {
            entity.HasKey(e => e.APIAccessKeyID).HasName("PK__APIAcces__79CAEB20D6CC8EEA");

            entity.ToTable("APIAccessKey", tb => tb.HasTrigger("tr_APIAccessKey"));

            entity.HasIndex(e => new { e.TokenCode, e.ExpiryDate }, "idx_APIAccessKey1");

            entity.HasIndex(e => e.TokenCode, "idx_APIAccessKey2");

            entity.HasIndex(e => new { e.TokenCode, e.ExpiryDate, e.CreatedDate }, "idx_APIAccessKey3");

            entity.Property(e => e.AccessKey)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ExpiryDate);
            entity.Property(e => e.TokenCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedDate);

            entity.HasOne(d => d.TokenCodeNavigation).WithMany(p => p.APIAccessKeys)
                .HasForeignKey(d => d.TokenCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APIAccessKey_TokenCode");
        });

        modelBuilder.Entity<APIMonitor>(entity =>
        {
            entity.HasKey(e => e.MonitorID).HasName("PK_MonitorID");

            entity.ToTable("APIMonitor", tb => tb.HasTrigger("tr_APIMonitor"));

            entity.Property(e => e.APIName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.UUID)
                .IsRequired()
                .HasMaxLength(36)
                .IsFixedLength();
        });

        modelBuilder.Entity<APIOrder>(entity =>
        {
            entity.ToTable("APIOrder", tb => tb.HasTrigger("tr_APIOrder"));

            entity.Property(e => e.AcceptedByName).HasMaxLength(255);
            entity.Property(e => e.AcceptedInstitutionName).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DoctorMCR).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OrderedByInstitution).HasMaxLength(255);
            entity.Property(e => e.OrderedByName).HasMaxLength(255);
            entity.Property(e => e.PatientFirstName).HasMaxLength(60);
            entity.Property(e => e.PatientLastName).HasMaxLength(60);
            entity.Property(e => e.PatientNRIC).HasMaxLength(60);
            entity.Property(e => e.ResourceType).HasMaxLength(255);
        });

        modelBuilder.Entity<APIOrderAllergy>(entity =>
        {
            entity.ToTable("APIOrderAllergy", tb => tb.HasTrigger("tr_APIOrderAllergy"));

            entity.Property(e => e.AllergyAgent).HasMaxLength(255);
            entity.Property(e => e.AllergyReaction).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.APIOrderID_FKNavigation).WithMany(p => p.APIOrderAllergies)
                .HasForeignKey(d => d.APIOrderID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APIOrderAllergy_APIOrder");
        });

        modelBuilder.Entity<APIOrderDiagnosis>(entity =>
        {
            entity.ToTable("APIOrderDiagnosis", tb => tb.HasTrigger("tr_APIOrderDiagnosis"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiagnosisDesc).HasMaxLength(255);
            entity.Property(e => e.DiagnosisType).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.APIOrderID_FKNavigation).WithMany(p => p.APIOrderDiagnoses)
                .HasForeignKey(d => d.APIOrderID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APIOrderDiagnosis_APIOrder");
        });

        modelBuilder.Entity<APIOrderMedication>(entity =>
        {
            entity.ToTable("APIOrderMedication", tb => tb.HasTrigger("tr_APIOrderMedication"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.MedicationDisplay).HasMaxLength(255);
            entity.Property(e => e.MedicationName).HasMaxLength(255);
            entity.Property(e => e.MedicationPeriodUnit).HasMaxLength(60);
            entity.Property(e => e.MedicationQuantityUnit).HasMaxLength(60);
            entity.Property(e => e.MedicationStatus).HasMaxLength(60);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);

            entity.HasOne(d => d.APIOrderID_FKNavigation).WithMany(p => p.APIOrderMedications)
                .HasForeignKey(d => d.APIOrderID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APIOrderMedication_APIOrder");
        });

        modelBuilder.Entity<APIOrderTask>(entity =>
        {
            entity.ToTable("APIOrderTask", tb => tb.HasTrigger("tr_APIOrderTask"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.TaskDisplay).HasMaxLength(255);
            entity.Property(e => e.TaskEndDateTime);
            entity.Property(e => e.TaskName).HasMaxLength(255);
            entity.Property(e => e.TaskPeriodUnit).HasMaxLength(60);
            entity.Property(e => e.TaskStartDateTime);

            entity.HasOne(d => d.APIOrderID_FKNavigation).WithMany(p => p.APIOrderTasks)
                .HasForeignKey(d => d.APIOrderID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APIOrderTask_APIOrder");
        });

        modelBuilder.Entity<APNSNotification>(entity =>
        {
            entity.ToTable("APNSNotification", tb => tb.HasTrigger("tr_APNSNotification"));

            entity.Property(e => e.NotificationMessage).HasMaxLength(1000);
            entity.Property(e => e.NotificationTitle).HasMaxLength(300);
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.ToTable("Activity", tb => tb.HasTrigger("tr_Activity"));

            entity.Property(e => e.ActivityDetail).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.Activities)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Activity_Disease");

            entity.HasOne(d => d.ProblemListID_FKNavigation).WithMany(p => p.Activities)
                .HasForeignKey(d => d.ProblemListID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Activity_ProblemList");
        });

        modelBuilder.Entity<AuditTrail>(entity =>
        {
            entity.ToTable("AuditTrail");

            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Event)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IPAddress).HasMaxLength(100);
            entity.Property(e => e.Module).HasMaxLength(255);

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.AuditTrails)
                .HasForeignKey(d => d.CreatedBy_FK)
                .HasConstraintName("FK_AuditTrail_Users");
        });

        modelBuilder.Entity<Audit_AMTQuestion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_AMTQuestion");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_APIAccessKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIAccessKey");

            entity.Property(e => e.AccessKey)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ExpiryDate);
            entity.Property(e => e.TokenCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedDate);
        });

        modelBuilder.Entity<Audit_APIMonitor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIMonitor");

            entity.Property(e => e.APIName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.UUID)
                .IsRequired()
                .HasMaxLength(36)
                .IsFixedLength();
        });

        modelBuilder.Entity<Audit_APIOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIOrder");

            entity.Property(e => e.AcceptedByName).HasMaxLength(255);
            entity.Property(e => e.AcceptedInstitutionName).HasMaxLength(255);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DoctorMCR).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OrderedByInstitution).HasMaxLength(255);
            entity.Property(e => e.OrderedByName).HasMaxLength(255);
            entity.Property(e => e.PatientFirstName).HasMaxLength(60);
            entity.Property(e => e.PatientLastName).HasMaxLength(60);
            entity.Property(e => e.PatientNRIC).HasMaxLength(60);
            entity.Property(e => e.ResourceType).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_APIOrderAllergy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIOrderAllergy");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AllergyAgent).HasMaxLength(255);
            entity.Property(e => e.AllergyReaction).HasMaxLength(255);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_APIOrderDiagnosis>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIOrderDiagnosis");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiagnosisDesc).HasMaxLength(255);
            entity.Property(e => e.DiagnosisType).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_APIOrderMedication>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIOrderMedication");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.MedicationDisplay).HasMaxLength(255);
            entity.Property(e => e.MedicationName).HasMaxLength(255);
            entity.Property(e => e.MedicationPeriodUnit).HasMaxLength(60);
            entity.Property(e => e.MedicationQuantityUnit).HasMaxLength(60);
            entity.Property(e => e.MedicationStatus).HasMaxLength(60);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
        });

        modelBuilder.Entity<Audit_APIOrderTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APIOrderTask");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.TaskDisplay).HasMaxLength(255);
            entity.Property(e => e.TaskEndDateTime);
            entity.Property(e => e.TaskName).HasMaxLength(255);
            entity.Property(e => e.TaskPeriodUnit).HasMaxLength(60);
            entity.Property(e => e.TaskStartDateTime);
        });

        modelBuilder.Entity<Audit_APNSNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_APNSNotification");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.NotificationMessage).HasMaxLength(1000);
            entity.Property(e => e.NotificationTitle).HasMaxLength(300);
        });

        modelBuilder.Entity<Audit_Activity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Activity");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.ActivityDetail).HasMaxLength(255);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_BillingInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingInvoice");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CaseNumber).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.InvoiceDate);
            entity.Property(e => e.InvoiceDueDate);
            entity.Property(e => e.InvoiceNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingInvoiceConsumable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingInvoiceConsumable");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingInvoiceService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingInvoiceService");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingPackage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingPackage");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<Audit_BillingPackageInformation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingPackageInformation");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_BillingPackageRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingPackageRequest");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BillingAddress1).HasMaxLength(255);
            entity.Property(e => e.BillingAddress2).HasMaxLength(255);
            entity.Property(e => e.BillingAddress3).HasMaxLength(255);
            entity.Property(e => e.BillingPostalCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountType).HasMaxLength(100);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PackageList).HasMaxLength(50);
            entity.Property(e => e.PackageRequestNo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PatientName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Remarks).IsRequired();
            entity.Property(e => e.SendBillTo)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.TotalPackageAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingProposal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingProposal");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ProposalNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ProposalType)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingProposalService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingProposalService");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Duration1).HasMaxLength(50);
            entity.Property(e => e.Duration2).HasMaxLength(50);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_BillingService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_BillingService");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CostPerSession).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).IsRequired();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_Branch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Branch");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_C4WDeviceToken>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_C4WDeviceToken");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClientEnvironment).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Device).IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NewDeviceToken).IsUnicode(false);
            entity.Property(e => e.OldDeviceToken).IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CPGoal>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CPGoalsInfo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_CarePlan>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlan");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CarePlanName).HasMaxLength(50);
            entity.Property(e => e.CarePlanType).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remark).HasMaxLength(500);
        });

        modelBuilder.Entity<Audit_CarePlanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanDetail");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CarePlanStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanStatus");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CarePlanStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CareReviewFrequency).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_CarePlanSub>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSub");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.ApprovedDate);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CarePlanGroupName).HasMaxLength(100);
            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.GoalStatus).HasMaxLength(100);
            entity.Property(e => e.InterventionStatus).HasMaxLength(100);
            entity.Property(e => e.ReviewDate);
        });

        modelBuilder.Entity<Audit_CarePlanSubActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSubActivity");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CarePlanSubCPGoal>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CarePlanSubGoal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSubGoal");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CarePlanSubGoalName).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Score1).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Score2).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<Audit_CarePlanSubIntervention>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSubIntervention");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CarePlanSubProblemList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSubProblemList");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.PLReviewDate);
            entity.Property(e => e.PLStatus).HasMaxLength(250);
        });

        modelBuilder.Entity<Audit_CarePlanSubProblemListGoal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CarePlanSubProblemListGoal");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.Score1).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Score2).HasColumnType("numeric(18, 0)");
        });

        modelBuilder.Entity<Audit_CareReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CareReport");

            entity.Property(e => e.ACP_DoneDate);
            entity.Property(e => e.ACP_ReviewDate);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AggravatingFactor).HasMaxLength(255);
            entity.Property(e => e.AirwayBreathingRemarks).HasMaxLength(500);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BladderCareRemarks).HasMaxLength(500);
            entity.Property(e => e.BowelInterventions).HasMaxLength(500);
            entity.Property(e => e.BowelRemarks).HasMaxLength(500);
            entity.Property(e => e.BowelSounds).HasMaxLength(100);
            entity.Property(e => e.BreathSounds).HasMaxLength(100);
            entity.Property(e => e.CareReportType).HasMaxLength(30);
            entity.Property(e => e.CharacteristicOfUrine).HasMaxLength(500);
            entity.Property(e => e.CirculationRemarks).HasMaxLength(500);
            entity.Property(e => e.Color).HasMaxLength(30);
            entity.Property(e => e.ColorOthers).HasMaxLength(30);
            entity.Property(e => e.Consistency).HasMaxLength(30);
            entity.Property(e => e.CoughAmount).HasMaxLength(30);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DayNightReversal).HasMaxLength(5);
            entity.Property(e => e.Dysuria).HasMaxLength(5);
            entity.Property(e => e.Environment)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.EnvironmentRemarks).HasMaxLength(500);
            entity.Property(e => e.Frequency).HasMaxLength(30);
            entity.Property(e => e.HeartSounds).HasMaxLength(100);
            entity.Property(e => e.LeftEyeReaction).HasMaxLength(30);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Nebuliser).HasMaxLength(1000);
            entity.Property(e => e.NeuroRemarks).HasMaxLength(500);
            entity.Property(e => e.O2Litres).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.O2LitresPercent).HasColumnType("decimal(3, 0)");
            entity.Property(e => e.OtherTreatment).HasMaxLength(2000);
            entity.Property(e => e.OtherTreatmentOther).HasMaxLength(255);
            entity.Property(e => e.OtherTreatmentRemarks).HasMaxLength(500);
            entity.Property(e => e.Pain).HasMaxLength(10);
            entity.Property(e => e.PainRemarks).HasMaxLength(500);
            entity.Property(e => e.PainScaleType).HasMaxLength(30);
            entity.Property(e => e.PersonalHygiene)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.PersonalHygieneRemarks).HasMaxLength(500);
            entity.Property(e => e.PsychoEmotionalSpiritual).HasMaxLength(1000);
            entity.Property(e => e.PsychoRemarks).HasMaxLength(500);
            entity.Property(e => e.RelievingFactor).HasMaxLength(255);
            entity.Property(e => e.RightEyeReaction).HasMaxLength(30);
            entity.Property(e => e.SectionRequireInput)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SectionRequired)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SectionStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SiteOfPain).HasMaxLength(255);
            entity.Property(e => e.SkinAndWoundCare)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SleepRestRemarks).HasMaxLength(500);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Stoma).HasMaxLength(5);
            entity.Property(e => e.StomaAmountOfOutput).HasMaxLength(50);
            entity.Property(e => e.StomaAppearance).HasMaxLength(20);
            entity.Property(e => e.StomaColour).HasMaxLength(20);
            entity.Property(e => e.StomaCreatedDate);
            entity.Property(e => e.StomaEffluent).HasMaxLength(50);
            entity.Property(e => e.StomaOstomyProductUsed).HasMaxLength(500);
            entity.Property(e => e.StomaPeristomalSkin).HasMaxLength(20);
            entity.Property(e => e.StomaProtrusion).HasMaxLength(50);
            entity.Property(e => e.StomaReviewDate);
            entity.Property(e => e.StomaSizeBreath).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StomaSizeLength).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.Subject).HasMaxLength(50);
            entity.Property(e => e.Sunction).HasMaxLength(5);
            entity.Property(e => e.TemperatureInterventions).HasMaxLength(100);
            entity.Property(e => e.TemperatureRemarks).HasMaxLength(500);
            entity.Property(e => e.TypeOfPain).HasMaxLength(30);
            entity.Property(e => e.TypeOfUrine).HasMaxLength(30);
            entity.Property(e => e.VisitEndDate);
            entity.Property(e => e.VisitStartDate);
        });

        modelBuilder.Entity<Audit_CareReportConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CareReportConfig");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.SectionAccess)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CareReportRehabilitation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CareReportRehabilitation");

            entity.Property(e => e.ADLAssistanceType).HasMaxLength(30);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Bounded).HasMaxLength(30);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DVTType).HasMaxLength(300);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.RehabilitationRemarks).HasMaxLength(500);
            entity.Property(e => e.WalkingAidType).HasMaxLength(30);
        });

        modelBuilder.Entity<Audit_CareReportSocialSupport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CareReportSocialSupport");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_CareReportSystemInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CareReportSystemInfo");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PrimaryDoctorName).HasMaxLength(255);
            entity.Property(e => e.SecondaryDoctorName).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_Chat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Chat");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Attachment).HasMaxLength(255);
            entity.Property(e => e.Attachment_Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<Audit_Code>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Code");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CodeName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.CurrencyCodeA)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyCodeN)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Referral_Code).HasMaxLength(3);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_CodeType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_CodeType");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CodeTypeName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_Diagnosis>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Diagnosis");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Diagnosis)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_DischargeSummaryReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_DischargeSummaryReport");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DischargeDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VisitDateEnd);
            entity.Property(e => e.VisitDateStart);
        });

        modelBuilder.Entity<Audit_DischargeSummaryReportAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_DischargeSummaryReportAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Disease>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Disease");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseCode).HasMaxLength(60);
            entity.Property(e => e.DiseaseName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_DiseaseInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_DiseaseInfo");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseInfo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_DiseaseSubInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_DiseaseSubInfo");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseSubInfo)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_DiseaseVitalSignType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_DiseaseVitalSignType");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_EBASDEPQuestion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EBASDEPQuestion");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_Enquiry>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Enquiry");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CaseNumber).HasMaxLength(50);
            entity.Property(e => e.ContactNumberOfCaller).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateOfBirth);
            entity.Property(e => e.EmailOfCaller).HasMaxLength(200);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MedicalHistory).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NameOfCaller).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OtherPreferredLanguage).HasMaxLength(50);
            entity.Property(e => e.OtherRace).HasMaxLength(255);
            entity.Property(e => e.PatientAddress1).HasMaxLength(255);
            entity.Property(e => e.PatientAddress2).HasMaxLength(255);
            entity.Property(e => e.PatientAddress3).HasMaxLength(255);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.PreferredAppointmentDateTime);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_EnquiryAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquiryAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_EnquiryConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquiryConfig");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EscalationPeriod).HasColumnType("decimal(2, 0)");
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_EnquiryEscPerson>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquiryEscPerson");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_EnquiryLanguage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquiryLanguage");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_EnquirySCM>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquirySCM");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_EnquiryServicesRequired>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EnquiryServicesRequired");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Event>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Event");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EventName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FromDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ToDate);
        });

        modelBuilder.Entity<Audit_EventUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EventUser");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Audit_EventUserLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_EventUserLog");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
        });

        modelBuilder.Entity<Audit_ExternalDoctor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ExternalDoctor");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_GeoFencing>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_GeoFencing");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IP).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_Group>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Group");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_GroupRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_GroupRole");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_ICAWoundCare>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ICAWoundCare");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_InitialCareAssessment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_InitialCareAssessment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AddressIssue).HasMaxLength(255);
            entity.Property(e => e.AssistiveAids).HasMaxLength(100);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BeliefInfluenced).HasMaxLength(255);
            entity.Property(e => e.BowelHabitsDays).HasMaxLength(5);
            entity.Property(e => e.BowelHabitsTimes).HasMaxLength(5);
            entity.Property(e => e.BowelSounds).HasMaxLength(100);
            entity.Property(e => e.BowelType).HasMaxLength(20);
            entity.Property(e => e.BreathSounds).HasMaxLength(100);
            entity.Property(e => e.Breathing).HasMaxLength(20);
            entity.Property(e => e.CAAlertness).HasMaxLength(50);
            entity.Property(e => e.CACommunication).HasMaxLength(50);
            entity.Property(e => e.Catheter).HasMaxLength(5);
            entity.Property(e => e.CatheterDateInserted);
            entity.Property(e => e.CatheterNextReviewDate);
            entity.Property(e => e.CatheterSize).HasMaxLength(10);
            entity.Property(e => e.CatheterType).HasMaxLength(50);
            entity.Property(e => e.Concern).HasMaxLength(255);
            entity.Property(e => e.ConsciousLevel).HasMaxLength(40);
            entity.Property(e => e.Cough).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DifficultyCopingYes).HasMaxLength(255);
            entity.Property(e => e.EmotionalState).HasMaxLength(20);
            entity.Property(e => e.EmotionalYes).HasMaxLength(255);
            entity.Property(e => e.Faith).HasMaxLength(255);
            entity.Property(e => e.GeneralCondition).HasMaxLength(20);
            entity.Property(e => e.GetSupport).HasMaxLength(255);
            entity.Property(e => e.GiveMeaningToLife).HasMaxLength(255);
            entity.Property(e => e.Hearing).HasMaxLength(50);
            entity.Property(e => e.HearingImpairedRemarks).HasMaxLength(500);
            entity.Property(e => e.HearingImpairedWithHearingAidRemarks).HasMaxLength(500);
            entity.Property(e => e.HomeFacilityRemarks).HasMaxLength(500);
            entity.Property(e => e.HowCanIHelp).HasMaxLength(255);
            entity.Property(e => e.HowDoYouScope).HasMaxLength(255);
            entity.Property(e => e.IncontinenceType).HasMaxLength(20);
            entity.Property(e => e.InfluenceTakeCare).HasMaxLength(255);
            entity.Property(e => e.LMP);
            entity.Property(e => e.LostInterestYes).HasMaxLength(255);
            entity.Property(e => e.MakeSense).HasMaxLength(255);
            entity.Property(e => e.MedicalHistory).HasMaxLength(1000);
            entity.Property(e => e.MilkFeedRx).HasMaxLength(255);
            entity.Property(e => e.MobilityStatus).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.O2Litres).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.O2LitresVia).HasMaxLength(40);
            entity.Property(e => e.Oralhealth).HasMaxLength(100);
            entity.Property(e => e.OtherBreathing).HasMaxLength(255);
            entity.Property(e => e.OtherEmotionalState).HasMaxLength(255);
            entity.Property(e => e.OxygenLMin).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.OxygenRemark).HasMaxLength(255);
            entity.Property(e => e.OxygenType).HasMaxLength(100);
            entity.Property(e => e.Palpation).HasMaxLength(100);
            entity.Property(e => e.Percussion).HasMaxLength(100);
            entity.Property(e => e.PersonalConcern).HasMaxLength(255);
            entity.Property(e => e.Physique).HasMaxLength(20);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.RoleOfBeliefForCommunity).HasMaxLength(255);
            entity.Property(e => e.RoleOfBeliefForInfluence).HasMaxLength(255);
            entity.Property(e => e.SectionStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SkinIssue).HasMaxLength(100);
            entity.Property(e => e.SkinTurgor).HasMaxLength(100);
            entity.Property(e => e.SkinType).HasMaxLength(100);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Stoma).HasMaxLength(5);
            entity.Property(e => e.StomaAmountOfOutput).HasMaxLength(50);
            entity.Property(e => e.StomaAppearance).HasMaxLength(20);
            entity.Property(e => e.StomaColour).HasMaxLength(20);
            entity.Property(e => e.StomaCreatedDate);
            entity.Property(e => e.StomaEffluent).HasMaxLength(50);
            entity.Property(e => e.StomaOstomyProductUsed).HasMaxLength(500);
            entity.Property(e => e.StomaPeristomalSkin).HasMaxLength(20);
            entity.Property(e => e.StomaProtrusion).HasMaxLength(50);
            entity.Property(e => e.StomaReviewDate);
            entity.Property(e => e.StomaSizeBreath).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StomaSizeLength).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StoolsType).HasMaxLength(20);
            entity.Property(e => e.SupportTo).HasMaxLength(255);
            entity.Property(e => e.TalkToSomeone).HasMaxLength(255);
            entity.Property(e => e.Teeth).HasMaxLength(100);
            entity.Property(e => e.TenderNGuarding).HasMaxLength(100);
            entity.Property(e => e.TracheostomyDateInserted);
            entity.Property(e => e.TracheostomyNextReviewDate);
            entity.Property(e => e.TracheostomySize).HasMaxLength(10);
            entity.Property(e => e.TracheostomyType).HasMaxLength(50);
            entity.Property(e => e.UrinaryFrequencyDay).HasMaxLength(5);
            entity.Property(e => e.UrinaryFrequencyTimes).HasMaxLength(5);
            entity.Property(e => e.UrinaryTypes).HasMaxLength(500);
            entity.Property(e => e.UrineColour).HasMaxLength(20);
            entity.Property(e => e.UrineConsistency).HasMaxLength(20);
            entity.Property(e => e.UseOfDrugExplain).HasMaxLength(1000);
            entity.Property(e => e.VSIntermittent).HasMaxLength(20);
            entity.Property(e => e.VSLocation).HasMaxLength(255);
            entity.Property(e => e.VSOnSetDate);
            entity.Property(e => e.VSPainFrequency).HasMaxLength(20);
            entity.Property(e => e.VSPrecipitatingFactors).HasMaxLength(255);
            entity.Property(e => e.VSQuality).HasMaxLength(20);
            entity.Property(e => e.VSRelievingFactors).HasMaxLength(255);
            entity.Property(e => e.Vision).HasMaxLength(20);
            entity.Property(e => e.VisionImpairedCataractRemarks).HasMaxLength(500);
            entity.Property(e => e.VisionImpairedGlaucomaRemarks).HasMaxLength(500);
            entity.Property(e => e.VisionImpairedRemarks).HasMaxLength(500);
            entity.Property(e => e.VisitDateTime);
            entity.Property(e => e.painOnSetDate);
        });

        modelBuilder.Entity<Audit_InitialCareAssessmentAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_InitialCareAssessmentAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_InitialCareAssessmentSpecialInstruction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_InitialCareAssessmentSpecialInstruction");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.Instructions).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.StartDate);
        });

        modelBuilder.Entity<Audit_InitialCareAssessmentVitalSign>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_InitialCareAssessmentVitalSign");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TimeOfRecord);
        });

        modelBuilder.Entity<Audit_Intervention>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Intervention");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.InterventionInfo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_Item>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Item");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_ItemStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ItemStock");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_LoginDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_LoginDevice");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceID)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DeviceType)
                .IsRequired()
                .HasMaxLength(8);
        });

        modelBuilder.Entity<Audit_MailSetting>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.msgBCC).HasMaxLength(255);
            entity.Property(e => e.msgCC).HasMaxLength(255);
            entity.Property(e => e.msgTo).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_MedicationVitalSignType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_MedicationVitalSignType");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_MobileAppVersioning>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_MobileAppVersioning");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AppName).HasMaxLength(50);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceType).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Version).HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_MultiDisciplinaryMeeting>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_MultiDisciplinaryMeeting");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.IssuesOverall).IsRequired();
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).IsRequired();
        });

        modelBuilder.Entity<Audit_MultiDisciplinaryMeetingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_MultiDisciplinaryMeetingDetail");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.IssueContent).IsRequired();
            entity.Property(e => e.IssueTitle).IsRequired();
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_Notification>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.notificationTypeCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_NotificationChat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_NotificationChat");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_NotificationEvent>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_NotificationEvent");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_NotificationMessageTemplate>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.notificationMessage)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.notificationSubject).HasMaxLength(200);
            entity.Property(e => e.notificationgroupCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_NotificationTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_NotificationTask");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_NotificationVitalSignDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_NutritionTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_NutritionTask");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AfterImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.BeforeImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndTime);
            entity.Property(e => e.Food).HasMaxLength(255);
            entity.Property(e => e.Liquid).HasMaxLength(50);
            entity.Property(e => e.Method).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.StartTime);
            entity.Property(e => e.Unit).HasMaxLength(10);
        });

        modelBuilder.Entity<Audit_NutritionTaskReference>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_NutritionTaskReference");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReferenceImage)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Otp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Otp");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Audit_Package>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Package");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PackageDetails)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PackageName).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_Patient>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Patient");

            entity.Property(e => e.ActionDescription).HasMaxLength(255);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AdmittedDate);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CareReviewDate);
            entity.Property(e => e.CaseID).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateOfBirth);
            entity.Property(e => e.DisplayName).HasMaxLength(255);
            entity.Property(e => e.DrugAllergy).HasMaxLength(500);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GenogramPicture)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HomePhone).HasMaxLength(100);
            entity.Property(e => e.IdentificationAttachmentFilename).HasMaxLength(255);
            entity.Property(e => e.IdentificationAttachmentPhysical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.IntegrationSourceID).HasMaxLength(100);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MailForFamilyNotification1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForFamilyNotification2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailingAddress1).HasMaxLength(255);
            entity.Property(e => e.MailingAddress2).HasMaxLength(255);
            entity.Property(e => e.MailingAddress3).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NRIC)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.NursingStation).HasMaxLength(255);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OtherLanguage).HasMaxLength(255);
            entity.Property(e => e.OtherRace).HasMaxLength(255);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Photo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.ReasonOfAdmission).HasMaxLength(500);
            entity.Property(e => e.ReferringDiagnosis).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitingFrequency).HasMaxLength(500);
        });

        modelBuilder.Entity<Audit_PatientAMT>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientAMT");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Alertness).HasMaxLength(50);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientAMTAnswer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientAMTAnswer");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientAccessLine>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientAccessLine");

            entity.Property(e => e.AccessLine)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.AccessLineRemarks).HasMaxLength(500);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateDueForChange);
            entity.Property(e => e.DateOfInsertion);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Patent)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.PatentReSited).HasMaxLength(5);
            entity.Property(e => e.PatentReSitedDate);
            entity.Property(e => e.PatentSite).HasMaxLength(1000);
        });

        modelBuilder.Entity<Audit_PatientAdditionalInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientAdditionalInfo");

            entity.Property(e => e.ACP_DoneDate);
            entity.Property(e => e.ACP_ReviewDate);
            entity.Property(e => e.AICD_InsertDate);
            entity.Property(e => e.AICD_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.AICD_ReviewDate);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CVCLine_InsertDate);
            entity.Property(e => e.CVCLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.CVCLine_ReviewDate);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DNR_DateInitiated);
            entity.Property(e => e.DNR_DateTerminated);
            entity.Property(e => e.DNR_InitiatedBy).HasMaxLength(255);
            entity.Property(e => e.DNR_TerminatedBy).HasMaxLength(255);
            entity.Property(e => e.IVLine_InsertDate);
            entity.Property(e => e.IVLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.IVLine_ReviewDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PICCLine_InsertDate);
            entity.Property(e => e.PICCLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.PICCLine_ReviewDate);
            entity.Property(e => e.Pacemaker_InsertDate);
            entity.Property(e => e.Pacemaker_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.Pacemaker_ReviewDate);
        });

        modelBuilder.Entity<Audit_PatientAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientBradenScale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientBradenScale");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientClinician>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientClinician");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientDrugAllergy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientDrugAllergy");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientEBASDEP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientEBASDEP");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Alertness).HasMaxLength(50);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientEBASDEPAnswer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientEBASDEPAnswer");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientFamilyHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientFamilyHistory");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Relationship).HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_PatientGC>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientGCS");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientImmunisation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientImmunisation");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Date);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NextDate);
            entity.Property(e => e.Place).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_PatientLanguage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientLanguage");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientMBI>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMBI");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientMF>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMFS");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientMMSE>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMMSE");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientMedicalHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMedicalHistory");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientMedication>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMedication");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Allergies).HasMaxLength(255);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientMedicationConsume>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMedicationConsume");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ClinicHosp).HasMaxLength(50);
            entity.Property(e => e.ClinicHospED).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DrContact).HasMaxLength(50);
            entity.Property(e => e.DrContactED).HasMaxLength(50);
            entity.Property(e => e.DrName).HasMaxLength(50);
            entity.Property(e => e.DrNameED).HasMaxLength(50);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.Indication).HasMaxLength(255);
            entity.Property(e => e.MCRNo).HasMaxLength(50);
            entity.Property(e => e.MCRNoED).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReasonOfDiscontinue).HasMaxLength(200);
            entity.Property(e => e.StartDate);
        });

        modelBuilder.Entity<Audit_PatientMedicationConsumeAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMedicationConsumeAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientMedicationSupply>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientMedicationSupply");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientNutrition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientNutrition");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Appetite).HasMaxLength(20);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiagnosedDysphasiaLastReviewDate);
            entity.Property(e => e.Diet).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowing).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingDateDue);
            entity.Property(e => e.EatingAndSwallowingDateInserted);
            entity.Property(e => e.EatingAndSwallowingSize).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingTypeOfTube).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingTypeOfTubeFeeding).HasMaxLength(20);
            entity.Property(e => e.Enteralfeeding).HasMaxLength(20);
            entity.Property(e => e.FluidConsistency).HasMaxLength(20);
            entity.Property(e => e.FluidRestrictionMLSPerDay).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.IVtherapyMLSPerDay).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.IVtherapyStateType).HasMaxLength(255);
            entity.Property(e => e.MilkFeedAmt).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.SizeofPEGJtube).HasMaxLength(20);
            entity.Property(e => e.WaterPerDay).HasColumnType("decimal(4, 0)");
        });

        modelBuilder.Entity<Audit_PatientOtherAllergy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientOtherAllergy");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientPackage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientPackage");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientProfile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientProfile");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Bed).HasMaxLength(255);
            entity.Property(e => e.BillingAddress1).HasMaxLength(255);
            entity.Property(e => e.BillingAddress2).HasMaxLength(255);
            entity.Property(e => e.BillingAddress3).HasMaxLength(255);
            entity.Property(e => e.BillingPostalCode).HasMaxLength(10);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.HomePhone).HasMaxLength(20);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(20);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.Organization).HasMaxLength(255);
            entity.Property(e => e.OtherReligion).HasMaxLength(255);
            entity.Property(e => e.Ward).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_PatientRAF>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientRAF");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientReferral>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientReferral");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FamilyAwareDiagnoseReason).HasMaxLength(255);
            entity.Property(e => e.FamilyAwarePrognosisReason).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PatientAwareDiagnoseReason).HasMaxLength(255);
            entity.Property(e => e.PatientAwarePrognosisReason).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_PatientReferralService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientReferralService");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientSocialSupport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientSocialSupport");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Firstname).HasMaxLength(255);
            entity.Property(e => e.Lastname).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_PatientSpecialIndicator>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientSpecialIndicator");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientWound>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWound");

            entity.Property(e => e.ActionDescription).HasMaxLength(255);
            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.LocationRemark).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OccurDate);
            entity.Property(e => e.SeenDate);
            entity.Property(e => e.Site).IsRequired();
            entity.Property(e => e.Stage).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientWoundDraft>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundDraft");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AnnotatedImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AnnotatedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssignDate);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AverageDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DepthEighty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthForty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNans).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNegative).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthSixty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthTwenty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Edges).HasMaxLength(50);
            entity.Property(e => e.Epithelizing).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Exudate).HasMaxLength(50);
            entity.Property(e => e.ExudateNature).HasMaxLength(50);
            entity.Property(e => e.ExudatedConsistency).HasMaxLength(50);
            entity.Property(e => e.Granulation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ImageUpload)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MaximumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MeasurementUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.MinimumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Necrosis).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.NextReviewDate);
            entity.Property(e => e.NextTreatmentDate);
            entity.Property(e => e.OccurDate);
            entity.Property(e => e.OriginalImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OriginalImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Others).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PeriWound).HasMaxLength(50);
            entity.Property(e => e.Perimeter).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Rotation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SeenDate);
            entity.Property(e => e.Site).HasMaxLength(50);
            entity.Property(e => e.Size).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Slough).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Stage).HasMaxLength(50);
            entity.Property(e => e.SurfaceArea).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TCUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.TO_Comments).IsUnicode(false);
            entity.Property(e => e.UnderMining).HasMaxLength(255);
            entity.Property(e => e.VisitDate);
            entity.Property(e => e.Volume).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.WoundBedImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WoundBedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImageDistance).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<Audit_PatientWoundReviewBy>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundReviewBy");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReviewDate);
        });

        modelBuilder.Entity<Audit_PatientWoundVisit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisit");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AnnotatedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Appearance).HasMaxLength(50);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AverageDepth).HasColumnType("decimal(8, 2)");
            entity.Property(e => e.CleansingSolutionUsed).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DESIGN_R_Depth).HasMaxLength(50);
            entity.Property(e => e.Debridement).HasMaxLength(50);
            entity.Property(e => e.DepthEighty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthForty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthImage)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DepthImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNans).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNegative).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthSixty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthTwenty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Edges).HasMaxLength(50);
            entity.Property(e => e.Exudate).HasMaxLength(50);
            entity.Property(e => e.ExudateSubInfo).HasMaxLength(50);
            entity.Property(e => e.ExudateSubInfo2).HasMaxLength(50);
            entity.Property(e => e.ImageUpload)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDraft).HasDefaultValue(false);
            entity.Property(e => e.MaximumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MeasurementUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.MinimumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Model_jpg).IsUnicode(false);
            entity.Property(e => e.Model_mtl).IsUnicode(false);
            entity.Property(e => e.Model_obj).IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NextReviewDate);
            entity.Property(e => e.NextTreatmentDate);
            entity.Property(e => e.OriginalImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PeriWound).HasMaxLength(50);
            entity.Property(e => e.Perimeter).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ProgressiveWoundStage).HasMaxLength(50);
            entity.Property(e => e.Rotation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Size).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Smell).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SurfaceArea).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TCUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.TC_AnnotatedImage).IsUnicode(false);
            entity.Property(e => e.TC_Auto_Epithelizing).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Granulation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Necrosis).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Others).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Slough).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Epithelizing).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Granulation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Necrosis).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_OriginalImage).IsUnicode(false);
            entity.Property(e => e.TC_Others).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Slough).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_WoundBedImage).IsUnicode(false);
            entity.Property(e => e.TO_Comments).IsUnicode(false);
            entity.Property(e => e.Title).HasMaxLength(30);
            entity.Property(e => e.UnderMining).HasMaxLength(255);
            entity.Property(e => e.UnderMiningDepth).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.VisitDate);
            entity.Property(e => e.Volume).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.WoundBedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WoundSubType).HasMaxLength(50);
            entity.Property(e => e.WoundType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WoundTypeOther).HasMaxLength(50);
            entity.Property(e => e.otherTissueName).IsUnicode(false);
            entity.Property(e => e.temperature).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.woundOverlaysImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImageDistance).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<Audit_PatientWoundVisitAppearance>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisitAppearance");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientWoundVisitCleansingItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisitCleansingItem");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_PatientWoundVisitClinician>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisitClinician");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientWoundVisitTreatment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisitTreatment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_PatientWoundVisitTreatmentList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_PatientWoundVisitTreatmentList");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(500);
        });

        modelBuilder.Entity<Audit_PatientWoundVisitTreatmentObjective>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_ProblemList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ProblemList");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ProblemInfo)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_ProblemListGoal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ProblemListGoal");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Goal).HasMaxLength(500);
        });

        modelBuilder.Entity<Audit_Receipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Receipt");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReceiptDate);
            entity.Property(e => e.ReceiptNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_ReceiptForInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ReceiptForInvoice");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Amt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_RegisteredDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_RegisteredDevice");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DeviceToken).HasMaxLength(300);
        });

        modelBuilder.Entity<Audit_RegisteredDeviceV2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_RegisteredDeviceV2");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AppName).HasMaxLength(50);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceToken)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FirstRegisterIpAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Version).HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_ResidentAssessmentCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ResidentAssessmentCategory");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Category1Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category1Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category2Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category2Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category3Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category3Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category4Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category4Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_Role>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Role");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DateCreated);
            entity.Property(e => e.OptionText)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.OptionType)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.OptionValue)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<Audit_ScheduledTask>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IntervalType)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.LastRun);
            entity.Property(e => e.NextRun);
            entity.Property(e => e.PerformTask)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.ScheduleDescription)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.TimeEnd);
            entity.Property(e => e.TimeStart);
            entity.Property(e => e.WeekDays)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Audit_ServiceForBilling>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ServiceForBilling");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Duration1)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Duration2).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_ServiceForBillingCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ServiceForBillingCost");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_ServiceSkillset>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_ServiceSkillset");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_SyncPatientLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_SyncPatientLog");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<Audit_SyncWoundLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_SyncWoundLog");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<Audit_SyncWoundVisitLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_SyncWoundVisitLog");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<Audit_SysConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_SysConfig");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ConfigName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_SystemForDisease>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_SystemForDisease");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.System).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_TD_WoundAssessmentFactor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TD_WoundAssessmentFactor");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Task>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_Task");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.H2OFlushingMLS).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.Location).HasMaxLength(800);
            entity.Property(e => e.MedicationInstructions).HasMaxLength(255);
            entity.Property(e => e.MilkFeedVolumeMLS).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OtherLocation).HasMaxLength(800);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Supplement).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_TaskFileAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskFileAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_TaskServicesRequired>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskServicesRequired");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_TaskSpecificDate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskSpecificDate");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.TaskDate);
        });

        modelBuilder.Entity<Audit_TaskUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskUser");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_TaskUserLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskUserLog");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StatusDate);
        });

        modelBuilder.Entity<Audit_TaskUserLogAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TaskUserLogAttachment");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_TeleconsultationRecording>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TeleconsultationRecording");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndTime);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Sid)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime);
        });

        modelBuilder.Entity<Audit_TeleconsultationReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TeleconsultationReport");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Memo).IsRequired();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Threshold>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.maxValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.minValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.name).HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_TreatmentListItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TreatmentListItem");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ItemBrand).HasMaxLength(255);
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_TreatmentTOL>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_TreatmentTOL");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_Type>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.code)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.codeValue)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.created);
            entity.Property(e => e.parentCode).HasMaxLength(100);
            entity.Property(e => e.updated);
        });

        modelBuilder.Entity<Audit_UploadFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UploadFile");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName).HasMaxLength(100);
            entity.Property(e => e.FileType).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Audit_User>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Designation).HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.HasValidEmail).HasDefaultValue(true);
            entity.Property(e => e.LastActivityDate);
            entity.Property(e => e.LastLockoutDate);
            entity.Property(e => e.LastLoginDate);
            entity.Property(e => e.LastLogoutDate);
            entity.Property(e => e.LastPasswordChangedDate);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LocationNow1).HasMaxLength(255);
            entity.Property(e => e.LocationNow2).HasMaxLength(255);
            entity.Property(e => e.LocationNow3).HasMaxLength(255);
            entity.Property(e => e.LocationNowModifiedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Photo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCodeNow).HasMaxLength(10);
            entity.Property(e => e.PreviousPasswords).HasMaxLength(1000);
            entity.Property(e => e.PreviousPasswords2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SessionKey).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TokenID).HasMaxLength(20);
            entity.Property(e => e.UserName).HasMaxLength(60);
        });

        modelBuilder.Entity<Audit_UserAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserAddress");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.Address1)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PostalCode).HasMaxLength(255);
        });

        modelBuilder.Entity<Audit_UserBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserBranch");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_UserCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserCategory");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserCategory)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_UserCategoryRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserCategoryRole");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Role).IsRequired();
        });

        modelBuilder.Entity<Audit_UserLanguage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserLanguage");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_UserOrganization>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserOrganization");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_UserRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserRole");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_UserSkillset>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserSkillset");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_UserType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserType");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ManpowerRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Audit_UserUserType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_UserUserType");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_VitalSign>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.source)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_VitalSignDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.detailValue).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_VitalSignRelationship>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Audit_VitalSignType>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<Audit_VitalSignTypeThreshold>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_VitalSignTypeThreshold");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<Audit_WoundConsolidatedEmail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Audit_WoundConsolidatedEmail");

            entity.Property(e => e.ActionTime);
            entity.Property(e => e.AuditAction)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<BillingInvoice>(entity =>
        {
            entity.ToTable("BillingInvoice", tb => tb.HasTrigger("tr_BillingInvoice"));

            entity.Property(e => e.CaseNumber).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.InvoiceDate);
            entity.Property(e => e.InvoiceDueDate);
            entity.Property(e => e.InvoiceNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.BillingInvoices)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_BillingInvoice_CareReport");

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.BillingInvoiceCreatedBy_FKNavigations)
                .HasForeignKey(d => d.CreatedBy_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoice_Users");

            entity.HasOne(d => d.CurrencyID_FKNavigation).WithMany(p => p.BillingInvoices)
                .HasForeignKey(d => d.CurrencyID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoice_Code");

            entity.HasOne(d => d.ModifiedBy_FKNavigation).WithMany(p => p.BillingInvoiceModifiedBy_FKNavigations)
                .HasForeignKey(d => d.ModifiedBy_FK)
                .HasConstraintName("FK_BillingInvoice_Users1");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.BillingInvoices)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoice_Patient");
        });

        modelBuilder.Entity<BillingInvoiceConsumable>(entity =>
        {
            entity.ToTable("BillingInvoiceConsumable", tb => tb.HasTrigger("tr_BillingInvoiceConsumable"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.BillingInvoiceID_FKNavigation).WithMany(p => p.BillingInvoiceConsumables)
                .HasForeignKey(d => d.BillingInvoiceID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoiceConsumable_BillingInvoice");

            entity.HasOne(d => d.ItemID_FKNavigation).WithMany(p => p.BillingInvoiceConsumables)
                .HasForeignKey(d => d.ItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoiceConsumable_Item");
        });

        modelBuilder.Entity<BillingInvoiceService>(entity =>
        {
            entity.ToTable("BillingInvoiceService", tb => tb.HasTrigger("tr_BillingInvoiceService"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.BillingInvoiceID_FKNavigation).WithMany(p => p.BillingInvoiceServices)
                .HasForeignKey(d => d.BillingInvoiceID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoiceService_BillingInvoice");

            entity.HasOne(d => d.ProposalID_FKNavigation).WithMany(p => p.BillingInvoiceServices)
                .HasForeignKey(d => d.ProposalID_FK)
                .HasConstraintName("FK_BillingInvoiceService_BillingProposal");

            entity.HasOne(d => d.ServiceID_FKNavigation).WithMany(p => p.BillingInvoiceServices)
                .HasForeignKey(d => d.ServiceID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingInvoiceService_ServiceForBilling");
        });

        modelBuilder.Entity<BillingPackage>(entity =>
        {
            entity.ToTable("BillingPackage", tb => tb.HasTrigger("tr_BillingPackage"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TotalPrice).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.BillingService).WithMany(p => p.BillingPackages)
                .HasForeignKey(d => d.BillingServiceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingPackage_BillingService");
        });

        modelBuilder.Entity<BillingPackageInformation>(entity =>
        {
            entity.HasKey(e => new { e.BillingPackageID, e.BillingServiceID });

            entity.ToTable("BillingPackageInformation", tb => tb.HasTrigger("tr_BillingPackageInformation"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<BillingPackageRequest>(entity =>
        {
            entity.HasKey(e => e.PackageRequestID).HasName("PK_PackageRequestID");

            entity.ToTable("BillingPackageRequest", tb => tb.HasTrigger("tr_BillingPackageRequest"));

            entity.Property(e => e.BillingAddress1).HasMaxLength(255);
            entity.Property(e => e.BillingAddress2).HasMaxLength(255);
            entity.Property(e => e.BillingAddress3).HasMaxLength(255);
            entity.Property(e => e.BillingPostalCode)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiscountAmt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountType).HasMaxLength(100);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PackageList).HasMaxLength(50);
            entity.Property(e => e.PackageRequestNo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PatientName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Remarks).IsRequired();
            entity.Property(e => e.SendBillTo)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.TotalPackageAmount).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<BillingProposal>(entity =>
        {
            entity.ToTable("BillingProposal", tb => tb.HasTrigger("tr_BillingProposal"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ProposalNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.ProposalType)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.TotalCost).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.BillingProposalCreatedBy_FKNavigations)
                .HasForeignKey(d => d.CreatedBy_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingProposal_Users");

            entity.HasOne(d => d.CurrencyID_FKNavigation).WithMany(p => p.BillingProposals)
                .HasForeignKey(d => d.CurrencyID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingProposal_Code");

            entity.HasOne(d => d.ModifiedBy_FKNavigation).WithMany(p => p.BillingProposalModifiedBy_FKNavigations)
                .HasForeignKey(d => d.ModifiedBy_FK)
                .HasConstraintName("FK_BillingProposal_Users1");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.BillingProposals)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingProposal_Patient");
        });

        modelBuilder.Entity<BillingProposalService>(entity =>
        {
            entity.ToTable("BillingProposalService", tb => tb.HasTrigger("tr_BillingProposalService"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Duration1).HasMaxLength(50);
            entity.Property(e => e.Duration2).HasMaxLength(50);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.BillingProposalID_FKNavigation).WithMany(p => p.BillingProposalServices)
                .HasForeignKey(d => d.BillingProposalID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingProposalService_BillingProposal");

            entity.HasOne(d => d.ServiceID_FKNavigation).WithMany(p => p.BillingProposalServices)
                .HasForeignKey(d => d.ServiceID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingProposalService_ServiceForBilling");
        });

        modelBuilder.Entity<BillingService>(entity =>
        {
            entity.HasKey(e => e.ServiceID).HasName("PK_ServiceID");

            entity.ToTable("BillingService", tb => tb.HasTrigger("tr_BillingService"));

            entity.Property(e => e.CostPerSession).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).IsRequired();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.CategoryID_FKNavigation).WithMany(p => p.BillingServices)
                .HasForeignKey(d => d.CategoryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillingService_Code");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.ToTable("Branch", tb => tb.HasTrigger("tr_Branch"));

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.CurrencyID_FKNavigation).WithMany(p => p.Branches)
                .HasForeignKey(d => d.CurrencyID_FK)
                .HasConstraintName("FK_Branch_Code");
        });

        modelBuilder.Entity<C4WDeviceToken>(entity =>
        {
            entity.ToTable("C4WDeviceToken", tb => tb.HasTrigger("tr_C4WDeviceToken"));

            entity.Property(e => e.ClientEnvironment).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Device).IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NewDeviceToken).IsUnicode(false);
            entity.Property(e => e.OldDeviceToken).IsUnicode(false);
        });

        modelBuilder.Entity<C4WImage>(entity =>
        {
            entity.ToTable("C4WImage");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DepthImageData).IsUnicode(false);
            entity.Property(e => e.DepthImageName).IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.TissueImageData).IsUnicode(false);
            entity.Property(e => e.TissueImageName).IsUnicode(false);
            entity.Property(e => e.WoundBedImageData).IsUnicode(false);
            entity.Property(e => e.WoundBedImageName).IsUnicode(false);
            entity.Property(e => e.WoundImageData).IsUnicode(false);
            entity.Property(e => e.WoundImageName).IsUnicode(false);
        });

        modelBuilder.Entity<CPGoal>(entity =>
        {
            entity.HasKey(e => e.CPGoalsID);

            entity.ToTable(tb => tb.HasTrigger("tr_CPGoals"));

            entity.Property(e => e.CPGoalsInfo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.CPGoals)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CPGoals_Disease");
        });

        modelBuilder.Entity<CarePlan>(entity =>
        {
            entity.ToTable("CarePlan", tb => tb.HasTrigger("tr_CarePlan"));

            entity.Property(e => e.CarePlanName).HasMaxLength(50);
            entity.Property(e => e.CarePlanType).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remark).HasMaxLength(500);

            entity.HasOne(d => d.CarePlanStatusID_FKNavigation).WithMany(p => p.CarePlans)
                .HasForeignKey(d => d.CarePlanStatusID_FK)
                .HasConstraintName("FK_CarePlan_CarePlanStatus");

            entity.HasOne(d => d.DiagnosisID_FKNavigation).WithMany(p => p.CarePlans)
                .HasForeignKey(d => d.DiagnosisID_FK)
                .HasConstraintName("FK_CarePlan_Diagnosis");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.CarePlans)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_CarePlan_Patient");
        });

        modelBuilder.Entity<CarePlanDetail>(entity =>
        {
            entity.HasKey(e => e.CarePlanDetailID).HasName("PK_CarePlanDetail_");

            entity.ToTable("CarePlanDetail", tb => tb.HasTrigger("tr_CarePlanDetail"));

            entity.HasOne(d => d.CarePlanSubID_FKNavigation).WithMany(p => p.CarePlanDetails)
                .HasForeignKey(d => d.CarePlanSubID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanDetail_CarePlanSub");

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.CarePlanDetails)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanDetail_DiseaseForDisease");

            entity.HasOne(d => d.SystemID_FKNavigation).WithMany(p => p.CarePlanDetails)
                .HasForeignKey(d => d.SystemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanDetail_SystemForDisease");
        });

        modelBuilder.Entity<CarePlanStatus>(entity =>
        {
            entity.ToTable("CarePlanStatus", tb => tb.HasTrigger("tr_CarePlanStatus"));

            entity.Property(e => e.CarePlanStatusID).ValueGeneratedNever();
            entity.Property(e => e.CarePlanStatus1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CarePlanStatus");
            entity.Property(e => e.CareReviewFrequency).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<CarePlanSub>(entity =>
        {
            entity.HasKey(e => e.CarePlanSubID).HasName("PK_CarePlanDetail");

            entity.ToTable("CarePlanSub", tb => tb.HasTrigger("tr_CarePlanSub"));

            entity.Property(e => e.ApprovedDate);
            entity.Property(e => e.CarePlanGroupName).HasMaxLength(100);
            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.GoalStatus).HasMaxLength(100);
            entity.Property(e => e.InterventionStatus).HasMaxLength(100);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ReviewDate);

            entity.HasOne(d => d.CarePlanID_FKNavigation).WithMany(p => p.CarePlanSubs)
                .HasForeignKey(d => d.CarePlanID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanSub_CarePlan");

            entity.HasMany(d => d.ActivityID_FKs).WithMany(p => p.CarePlanSubID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "CarePlanSubActivity",
                    r => r.HasOne<Activity>().WithMany()
                        .HasForeignKey("ActivityID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubActivity_Activity"),
                    l => l.HasOne<CarePlanSub>().WithMany()
                        .HasForeignKey("CarePlanSubID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubActivity_CarePlanSub"),
                    j =>
                    {
                        j.HasKey("CarePlanSubID_FK", "ActivityID_FK");
                        j.ToTable("CarePlanSubActivity", tb => tb.HasTrigger("tr_CarePlanSubActivity"));
                    });

            entity.HasMany(d => d.CPGoalsID_FKs).WithMany(p => p.CarePlanSubID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "CarePlanSubCPGoal",
                    r => r.HasOne<CPGoal>().WithMany()
                        .HasForeignKey("CPGoalsID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubCPGoals_CPGoals"),
                    l => l.HasOne<CarePlanSub>().WithMany()
                        .HasForeignKey("CarePlanSubID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubCPGoals_CarePlanSub"),
                    j =>
                    {
                        j.HasKey("CarePlanSubID_FK", "CPGoalsID_FK");
                        j.ToTable("CarePlanSubCPGoals", tb => tb.HasTrigger("tr_CarePlanSubCPGoals"));
                    });

            entity.HasMany(d => d.InterventionID_FKs).WithMany(p => p.CarePlanSubID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "CarePlanSubIntervention",
                    r => r.HasOne<Intervention>().WithMany()
                        .HasForeignKey("InterventionID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubIntervention_Intervention"),
                    l => l.HasOne<CarePlanSub>().WithMany()
                        .HasForeignKey("CarePlanSubID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CarePlanSubIntervention_CarePlanSub"),
                    j =>
                    {
                        j.HasKey("CarePlanSubID_FK", "InterventionID_FK");
                        j.ToTable("CarePlanSubIntervention", tb => tb.HasTrigger("tr_CarePlanSubIntervention"));
                    });
        });

        modelBuilder.Entity<CarePlanSubGoal>(entity =>
        {
            entity.ToTable("CarePlanSubGoal", tb => tb.HasTrigger("tr_CarePlanSubGoal"));

            entity.Property(e => e.CarePlanSubGoalName).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Score1).HasColumnType("numeric(3, 0)");
            entity.Property(e => e.Score2).HasColumnType("numeric(3, 0)");

            entity.HasOne(d => d.CarePlanSubID_FKNavigation).WithMany(p => p.CarePlanSubGoals)
                .HasForeignKey(d => d.CarePlanSubID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanSubGoal_CarePlanSub");

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.CarePlanSubGoals)
                .HasForeignKey(d => d.DiseaseID_FK)
                .HasConstraintName("FK_CarePlanSubGoal_Disease");
        });

        modelBuilder.Entity<CarePlanSubProblemList>(entity =>
        {
            entity.ToTable("CarePlanSubProblemList", tb => tb.HasTrigger("tr_CarePlanSubProblemList"));

            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.PLReviewDate);
            entity.Property(e => e.PLStatus).HasMaxLength(250);

            entity.HasOne(d => d.CarePlanSubID_FKNavigation).WithMany(p => p.CarePlanSubProblemLists)
                .HasForeignKey(d => d.CarePlanSubID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanSubProblemList_CarePlanSub");

            entity.HasOne(d => d.ProblemListID_FKNavigation).WithMany(p => p.CarePlanSubProblemLists)
                .HasForeignKey(d => d.ProblemListID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanSubProblemList_ProblemList");
        });

        modelBuilder.Entity<CarePlanSubProblemListGoal>(entity =>
        {
            entity.ToTable("CarePlanSubProblemListGoal", tb => tb.HasTrigger("tr_CarePlanSubProblemListGoal"));

            entity.Property(e => e.Goal).HasMaxLength(500);
            entity.Property(e => e.Score1).HasColumnType("numeric(3, 0)");
            entity.Property(e => e.Score2).HasColumnType("numeric(3, 0)");

            entity.HasOne(d => d.CarePlanSubProblemListID_FKNavigation).WithMany(p => p.CarePlanSubProblemListGoals)
                .HasForeignKey(d => d.CarePlanSubProblemListID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarePlanSubProblemListGoal_CarePlanSubProblemList");

            entity.HasOne(d => d.Operator).WithMany(p => p.CarePlanSubProblemListGoalOperators)
                .HasForeignKey(d => d.OperatorID)
                .HasConstraintName("FK_CarePlanSubProblemListGoal_Operator");

            entity.HasOne(d => d.ProblemListGoalID_FKNavigation).WithMany(p => p.CarePlanSubProblemListGoals)
                .HasForeignKey(d => d.ProblemListGoalID_FK)
                .HasConstraintName("FK_CarePlanSubProblemListGoal_ProblemListGoal");

            entity.HasOne(d => d.ScoreType).WithMany(p => p.CarePlanSubProblemListGoalScoreTypes)
                .HasForeignKey(d => d.ScoreTypeID)
                .HasConstraintName("FK_CarePlanSubProblemListGoal_ScoreType");
        });

        modelBuilder.Entity<CareReport>(entity =>
        {
            entity.ToTable("CareReport", tb => tb.HasTrigger("tr_CareReport"));

            entity.Property(e => e.ACP_DoneDate);
            entity.Property(e => e.ACP_ReviewDate);
            entity.Property(e => e.AggravatingFactor).HasMaxLength(255);
            entity.Property(e => e.AirwayBreathingRemarks).HasMaxLength(500);
            entity.Property(e => e.BladderCareRemarks).HasMaxLength(500);
            entity.Property(e => e.BowelInterventions).HasMaxLength(500);
            entity.Property(e => e.BowelRemarks).HasMaxLength(500);
            entity.Property(e => e.BowelSounds).HasMaxLength(100);
            entity.Property(e => e.BreathSounds).HasMaxLength(100);
            entity.Property(e => e.CareReportType).HasMaxLength(30);
            entity.Property(e => e.CharacteristicOfUrine).HasMaxLength(500);
            entity.Property(e => e.CirculationRemarks).HasMaxLength(500);
            entity.Property(e => e.Color).HasMaxLength(30);
            entity.Property(e => e.ColorOthers).HasMaxLength(30);
            entity.Property(e => e.Consistency).HasMaxLength(30);
            entity.Property(e => e.CoughAmount).HasMaxLength(30);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DayNightReversal).HasMaxLength(5);
            entity.Property(e => e.Dysuria).HasMaxLength(5);
            entity.Property(e => e.Environment)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.EnvironmentRemarks).HasMaxLength(500);
            entity.Property(e => e.Frequency).HasMaxLength(30);
            entity.Property(e => e.HeartSounds).HasMaxLength(100);
            entity.Property(e => e.LeftEyeReaction).HasMaxLength(30);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Nebuliser).HasMaxLength(1000);
            entity.Property(e => e.NeuroRemarks).HasMaxLength(500);
            entity.Property(e => e.O2Litres).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.O2LitresPercent).HasColumnType("decimal(3, 0)");
            entity.Property(e => e.OtherTreatment).HasMaxLength(2000);
            entity.Property(e => e.OtherTreatmentOther).HasMaxLength(255);
            entity.Property(e => e.OtherTreatmentRemarks).HasMaxLength(500);
            entity.Property(e => e.Pain).HasMaxLength(10);
            entity.Property(e => e.PainRemarks).HasMaxLength(500);
            entity.Property(e => e.PainScaleType).HasMaxLength(30);
            entity.Property(e => e.PersonalHygiene)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.PersonalHygieneRemarks).HasMaxLength(500);
            entity.Property(e => e.PsychoEmotionalSpiritual).HasMaxLength(1000);
            entity.Property(e => e.PsychoRemarks).HasMaxLength(500);
            entity.Property(e => e.RelievingFactor).HasMaxLength(255);
            entity.Property(e => e.RightEyeReaction).HasMaxLength(30);
            entity.Property(e => e.SectionRequireInput)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SectionRequired)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SectionStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SiteOfPain).HasMaxLength(255);
            entity.Property(e => e.SkinAndWoundCare)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.SleepRestRemarks).HasMaxLength(500);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Stoma).HasMaxLength(5);
            entity.Property(e => e.StomaAmountOfOutput).HasMaxLength(50);
            entity.Property(e => e.StomaAppearance).HasMaxLength(20);
            entity.Property(e => e.StomaColour).HasMaxLength(20);
            entity.Property(e => e.StomaCreatedDate);
            entity.Property(e => e.StomaEffluent).HasMaxLength(50);
            entity.Property(e => e.StomaOstomyProductUsed).HasMaxLength(500);
            entity.Property(e => e.StomaPeristomalSkin).HasMaxLength(20);
            entity.Property(e => e.StomaProtrusion).HasMaxLength(50);
            entity.Property(e => e.StomaReviewDate);
            entity.Property(e => e.StomaSizeBreath).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StomaSizeLength).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.Subject).HasMaxLength(50);
            entity.Property(e => e.Sunction).HasMaxLength(5);
            entity.Property(e => e.TemperatureInterventions).HasMaxLength(100);
            entity.Property(e => e.TemperatureRemarks).HasMaxLength(500);
            entity.Property(e => e.TypeOfPain).HasMaxLength(30);
            entity.Property(e => e.TypeOfUrine).HasMaxLength(30);
            entity.Property(e => e.VisitEndDate);
            entity.Property(e => e.VisitStartDate);

            entity.HasOne(d => d.AirwayBreathingID_FKNavigation).WithMany(p => p.CareReportAirwayBreathingID_FKNavigations)
                .HasForeignKey(d => d.AirwayBreathingID_FK)
                .HasConstraintName("FK_CareReport_Code1");

            entity.HasOne(d => d.BladderCareID_FKNavigation).WithMany(p => p.CareReportBladderCareID_FKNavigations)
                .HasForeignKey(d => d.BladderCareID_FK)
                .HasConstraintName("FK_CareReport_Code15");

            entity.HasOne(d => d.BowelCareID_FKNavigation).WithMany(p => p.CareReportBowelCareID_FKNavigations)
                .HasForeignKey(d => d.BowelCareID_FK)
                .HasConstraintName("FK_CareReport_Code14");

            entity.HasOne(d => d.CapillaryRefillID_FKNavigation).WithMany(p => p.CareReportCapillaryRefillID_FKNavigations)
                .HasForeignKey(d => d.CapillaryRefillID_FK)
                .HasConstraintName("FK_CareReport_Code7");

            entity.HasOne(d => d.CarePlanID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.CarePlanID_FK)
                .HasConstraintName("FK_CareReport_CarePlan");

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.InverseCareReportID_FKNavigation)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_CareReport_CareReport");

            entity.HasOne(d => d.CareReportRehabilitationID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.CareReportRehabilitationID_FK)
                .HasConstraintName("FK_CareReport_CareReportRehabilitation");

            entity.HasOne(d => d.CareReportSystemInfoID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.CareReportSystemInfoID_FK)
                .HasConstraintName("FK_CareReport_CareReportSystemInfo");

            entity.HasOne(d => d.CirculationID_FKNavigation).WithMany(p => p.CareReportCirculationID_FKNavigations)
                .HasForeignKey(d => d.CirculationID_FK)
                .HasConstraintName("FK_CareReport_Code4");

            entity.HasOne(d => d.CoughID_FKNavigation).WithMany(p => p.CareReportCoughID_FKNavigations)
                .HasForeignKey(d => d.CoughID_FK)
                .HasConstraintName("FK_CareReport_Code2");

            entity.HasOne(d => d.DiapersID_FKNavigation).WithMany(p => p.CareReportDiapersID_FKNavigations)
                .HasForeignKey(d => d.DiapersID_FK)
                .HasConstraintName("FK_CareReport_Code16");

            entity.HasOne(d => d.LipsID_FKNavigation).WithMany(p => p.CareReportLipsID_FKNavigations)
                .HasForeignKey(d => d.LipsID_FK)
                .HasConstraintName("FK_CareReport_Code6");

            entity.HasOne(d => d.LowerEyelidsID_FKNavigation).WithMany(p => p.CareReportLowerEyelidsID_FKNavigations)
                .HasForeignKey(d => d.LowerEyelidsID_FK)
                .HasConstraintName("FK_CareReport_Code5");

            entity.HasOne(d => d.O2AidID_FKNavigation).WithMany(p => p.CareReportO2AidID_FKNavigations)
                .HasForeignKey(d => d.O2AidID_FK)
                .HasConstraintName("FK_CareReport_Code3");

            entity.HasOne(d => d.PainDescriptionID_FKNavigation).WithMany(p => p.CareReportPainDescriptionID_FKNavigations)
                .HasForeignKey(d => d.PainDescriptionID_FK)
                .HasConstraintName("FK_CareReport_Code");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CareReport_Patient");

            entity.HasOne(d => d.PatientNutritionID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.PatientNutritionID_FK)
                .HasConstraintName("FK_CareReport_PatientNutrition");

            entity.HasOne(d => d.PeripheralPulsesPedalID_FKNavigation).WithMany(p => p.CareReportPeripheralPulsesPedalID_FKNavigations)
                .HasForeignKey(d => d.PeripheralPulsesPedalID_FK)
                .HasConstraintName("FK_CareReport_Code9");

            entity.HasOne(d => d.PeripheralPulsesRadialID_FKNavigation).WithMany(p => p.CareReportPeripheralPulsesRadialID_FKNavigations)
                .HasForeignKey(d => d.PeripheralPulsesRadialID_FK)
                .HasConstraintName("FK_CareReport_Code8");

            entity.HasOne(d => d.SleepRestID_FKNavigation).WithMany(p => p.CareReportSleepRestID_FKNavigations)
                .HasForeignKey(d => d.SleepRestID_FK)
                .HasConstraintName("FK_CareReport_Code10");

            entity.HasOne(d => d.TemperatureID_FKNavigation).WithMany(p => p.CareReportTemperatureID_FKNavigations)
                .HasForeignKey(d => d.TemperatureID_FK)
                .HasConstraintName("FK_CareReport_Code11");

            entity.HasOne(d => d.VisitedBy_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.VisitedBy_FK)
                .HasConstraintName("FK_CareReport_Users");

            entity.HasOne(d => d.VitalSignID_FKNavigation).WithMany(p => p.CareReports)
                .HasForeignKey(d => d.VitalSignID_FK)
                .HasConstraintName("FK_CareReport_VitalSigns");
        });

        modelBuilder.Entity<CareReportConfig>(entity =>
        {
            entity.ToTable("CareReportConfig", tb => tb.HasTrigger("tr_CareReportConfig"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.SectionAccess)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.UserTypeID_FKNavigation).WithMany(p => p.CareReportConfigs)
                .HasForeignKey(d => d.UserTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CareReportConfig_UserType");
        });

        modelBuilder.Entity<CareReportRehabilitation>(entity =>
        {
            entity.ToTable("CareReportRehabilitation", tb => tb.HasTrigger("tr_CareReportRehabilitation"));

            entity.Property(e => e.ADLAssistanceType).HasMaxLength(30);
            entity.Property(e => e.Bounded).HasMaxLength(30);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DVTType).HasMaxLength(300);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.RehabilitationRemarks).HasMaxLength(500);
            entity.Property(e => e.WalkingAidType).HasMaxLength(30);
        });

        modelBuilder.Entity<CareReportSocialSupport>(entity =>
        {
            entity.ToTable("CareReportSocialSupport", tb => tb.HasTrigger("tr_CareReportSocialSupport"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.CareReportSocialSupports)
                .HasForeignKey(d => d.CareReportID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CareReportSocialSupport_CareReport");

            entity.HasOne(d => d.PatientSocialSupportID_FKNavigation).WithMany(p => p.CareReportSocialSupports)
                .HasForeignKey(d => d.PatientSocialSupportID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CareReportSocialSupport_PatientSocialSupport");
        });

        modelBuilder.Entity<CareReportSystemInfo>(entity =>
        {
            entity.ToTable("CareReportSystemInfo", tb => tb.HasTrigger("tr_CareReportSystemInfo"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PrimaryDoctorName).HasMaxLength(255);
            entity.Property(e => e.SecondaryDoctorName).HasMaxLength(255);

            entity.HasOne(d => d.KeyPerson1UserID_FKNavigation).WithMany(p => p.CareReportSystemInfoKeyPerson1UserID_FKNavigations)
                .HasForeignKey(d => d.KeyPerson1UserID_FK)
                .HasConstraintName("FK_CareReportSystemInfo_Users1");

            entity.HasOne(d => d.KeyPerson2UserID_FKNavigation).WithMany(p => p.CareReportSystemInfoKeyPerson2UserID_FKNavigations)
                .HasForeignKey(d => d.KeyPerson2UserID_FK)
                .HasConstraintName("FK_CareReportSystemInfo_Users2");

            entity.HasOne(d => d.PrimaryDoctorUserID_FKNavigation).WithMany(p => p.CareReportSystemInfoPrimaryDoctorUserID_FKNavigations)
                .HasForeignKey(d => d.PrimaryDoctorUserID_FK)
                .HasConstraintName("FK_CareReportSystemInfo_PatientClinician1");

            entity.HasOne(d => d.SecondaryDoctorUserID_FKNavigation).WithMany(p => p.CareReportSystemInfoSecondaryDoctorUserID_FKNavigations)
                .HasForeignKey(d => d.SecondaryDoctorUserID_FK)
                .HasConstraintName("FK_CareReportSystemInfo_PatientClinician2");
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.ToTable("Chat", tb => tb.HasTrigger("tr_Chat"));

            entity.Property(e => e.Attachment).HasMaxLength(255);
            entity.Property(e => e.Attachment_Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.Chats)
                .HasForeignKey(d => d.CreatedBy_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Chat_Users");

            entity.HasOne(d => d.ParentID_FKNavigation).WithMany(p => p.InverseParentID_FKNavigation)
                .HasForeignKey(d => d.ParentID_FK)
                .HasConstraintName("FK_Chat_Chat1");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.Chats)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_Chat_Patient1");
        });

        modelBuilder.Entity<Code>(entity =>
        {
            entity.ToTable("Code", tb => tb.HasTrigger("tr_Code"));

            entity.Property(e => e.CodeName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.CurrencyCodeA)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyCodeN)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Referral_Code).HasMaxLength(3);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.CodeTypeId_FKNavigation).WithMany(p => p.Codes)
                .HasForeignKey(d => d.CodeTypeId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Code_CodeType");

            entity.HasOne(d => d.MedicationGroupID_FKNavigation).WithMany(p => p.InverseMedicationGroupID_FKNavigation)
                .HasForeignKey(d => d.MedicationGroupID_FK)
                .HasConstraintName("FK_Code_Code");

            entity.HasMany(d => d.ServiceID_FKs).WithMany(p => p.SkillsetID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "ServiceSkillset",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("ServiceID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ServiceSkillset_Code1"),
                    l => l.HasOne<Code>().WithMany()
                        .HasForeignKey("SkillsetID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ServiceSkillset_Code"),
                    j =>
                    {
                        j.HasKey("ServiceID_FK", "SkillsetID_FK");
                        j.ToTable("ServiceSkillset", tb => tb.HasTrigger("tr_ServiceSkillset"));
                    });

            entity.HasMany(d => d.SkillsetID_FKs).WithMany(p => p.ServiceID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "ServiceSkillset",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("SkillsetID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ServiceSkillset_Code"),
                    l => l.HasOne<Code>().WithMany()
                        .HasForeignKey("ServiceID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ServiceSkillset_Code1"),
                    j =>
                    {
                        j.HasKey("ServiceID_FK", "SkillsetID_FK");
                        j.ToTable("ServiceSkillset", tb => tb.HasTrigger("tr_ServiceSkillset"));
                    });
        });

        modelBuilder.Entity<CodeType>(entity =>
        {
            entity.ToTable("CodeType", tb => tb.HasTrigger("tr_CodeType"));

            entity.Property(e => e.CodeTypeName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Diagnosis>(entity =>
        {
            entity.ToTable("Diagnosis", tb => tb.HasTrigger("tr_Diagnosis"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Diagnosis1)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("Diagnosis");
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<DischargeSummaryReport>(entity =>
        {
            entity.ToTable("DischargeSummaryReport", tb => tb.HasTrigger("tr_DischargeSummaryReport"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DischargeDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VisitDateEnd);
            entity.Property(e => e.VisitDateStart);
        });

        modelBuilder.Entity<DischargeSummaryReportAttachment>(entity =>
        {
            entity.ToTable("DischargeSummaryReportAttachment", tb => tb.HasTrigger("tr_DischargeSummaryReportAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DischargeSummaryReportID_FKNavigation).WithMany(p => p.DischargeSummaryReportAttachments)
                .HasForeignKey(d => d.DischargeSummaryReportID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DischargeSummaryReportAttachment_DischargeSummaryReport");
        });

        modelBuilder.Entity<Disease>(entity =>
        {
            entity.ToTable("Disease", tb => tb.HasTrigger("tr_Disease"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseCode).HasMaxLength(60);
            entity.Property(e => e.DiseaseName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.SystemID_FKNavigation).WithMany(p => p.Diseases)
                .HasForeignKey(d => d.SystemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Disease_SystemForDisease");
        });

        modelBuilder.Entity<DiseaseInfo>(entity =>
        {
            entity.ToTable("DiseaseInfo", tb => tb.HasTrigger("tr_DiseaseInfo"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseInfo1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("DiseaseInfo");
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.DiseaseInfos)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DiseaseInfo_Disease");
        });

        modelBuilder.Entity<DiseaseSubInfo>(entity =>
        {
            entity.ToTable("DiseaseSubInfo", tb => tb.HasTrigger("tr_DiseaseSubInfo"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiseaseSubInfo1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("DiseaseSubInfo");
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.DiseaseSubInfos)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DiseaseSubInfo_Disease");
        });

        modelBuilder.Entity<DiseaseVitalSignType>(entity =>
        {
            entity.ToTable("DiseaseVitalSignType", tb => tb.HasTrigger("tr_DiseaseVitalSignType"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.DiseaseVitalSignTypes)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DiseaseVitalSignType_Disease");

            entity.HasOne(d => d.VitalSignTypeID_FKNavigation).WithMany(p => p.DiseaseVitalSignTypes)
                .HasForeignKey(d => d.VitalSignTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DiseaseVitalSignType_VitalSignTypes");
        });

        modelBuilder.Entity<EBASDEPQuestion>(entity =>
        {
            entity.ToTable("EBASDEPQuestion", tb => tb.HasTrigger("tr_EBASDEPQuestion"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<EmailLog>(entity =>
        {
            entity.ToTable("EmailLog");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.attachmentName).HasMaxLength(255);
            entity.Property(e => e.description).HasMaxLength(255);
            entity.Property(e => e.msgFrom).HasMaxLength(255);
            entity.Property(e => e.msgFromName).HasMaxLength(255);
            entity.Property(e => e.smtpLogin).HasMaxLength(255);
            entity.Property(e => e.smtpPassword).HasMaxLength(255);
            entity.Property(e => e.smtpPort).HasMaxLength(255);
            entity.Property(e => e.smtpServerAddress).HasMaxLength(255);
        });

        modelBuilder.Entity<Enquiry>(entity =>
        {
            entity.ToTable("Enquiry", tb => tb.HasTrigger("tr_Enquiry"));

            entity.Property(e => e.CaseNumber).HasMaxLength(50);
            entity.Property(e => e.ContactNumberOfCaller).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateOfBirth);
            entity.Property(e => e.EmailOfCaller).HasMaxLength(200);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MedicalHistory).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NameOfCaller).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OtherPreferredLanguage).HasMaxLength(50);
            entity.Property(e => e.OtherRace).HasMaxLength(255);
            entity.Property(e => e.PatientAddress1).HasMaxLength(255);
            entity.Property(e => e.PatientAddress2).HasMaxLength(255);
            entity.Property(e => e.PatientAddress3).HasMaxLength(255);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.PreferredAppointmentDateTime);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CareManagerAssignedID_FKNavigation).WithMany(p => p.Enquiries)
                .HasForeignKey(d => d.CareManagerAssignedID_FK)
                .HasConstraintName("FK_Enquiry_Users");

            entity.HasOne(d => d.CaregiverAtHomeID_FKNavigation).WithMany(p => p.EnquiryCaregiverAtHomeID_FKNavigations)
                .HasForeignKey(d => d.CaregiverAtHomeID_FK)
                .HasConstraintName("FK_Enquiry_CaregiverAtHome");

            entity.HasOne(d => d.EnquirySourceID_FKNavigation).WithMany(p => p.EnquiryEnquirySourceID_FKNavigations)
                .HasForeignKey(d => d.EnquirySourceID_FK)
                .HasConstraintName("FK_Enquiry_Source");

            entity.HasOne(d => d.GenderID_FKNavigation).WithMany(p => p.EnquiryGenderID_FKNavigations)
                .HasForeignKey(d => d.GenderID_FK)
                .HasConstraintName("FK_Enquiry_Gender");

            entity.HasOne(d => d.PreferredLanguageID_FKNavigation).WithMany(p => p.EnquiryPreferredLanguageID_FKNavigations)
                .HasForeignKey(d => d.PreferredLanguageID_FK)
                .HasConstraintName("FK_Enquiry_PreferredLanguage");

            entity.HasOne(d => d.RaceID_FKNavigation).WithMany(p => p.EnquiryRaceID_FKNavigations)
                .HasForeignKey(d => d.RaceID_FK)
                .HasConstraintName("FK_Enquiry_Race");

            entity.HasOne(d => d.ServicesRequiredID_FKNavigation).WithMany(p => p.EnquiryServicesRequiredID_FKNavigations)
                .HasForeignKey(d => d.ServicesRequiredID_FK)
                .HasConstraintName("FK_Enquiry_ServicesRequired");

            entity.HasOne(d => d.UserOrganizationID_FKNavigation).WithMany(p => p.EnquiryUserOrganizationID_FKNavigations)
                .HasForeignKey(d => d.UserOrganizationID_FK)
                .HasConstraintName("FK_Enquiry_Organization");

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.EnquiryID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "EnquiryLanguage",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryLanguage_Code"),
                    l => l.HasOne<Enquiry>().WithMany()
                        .HasForeignKey("EnquiryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryLanguage_Enquiry"),
                    j =>
                    {
                        j.HasKey("EnquiryID_FK", "CodeID_FK");
                        j.ToTable("EnquiryLanguage", tb => tb.HasTrigger("tr_EnquiryLanguage"));
                    });

            entity.HasMany(d => d.CodeID_FKsNavigation).WithMany(p => p.EnquiryID_FKsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "EnquiryServicesRequired",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryServicesRequired_Code"),
                    l => l.HasOne<Enquiry>().WithMany()
                        .HasForeignKey("EnquiryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryServicesRequired_Enquiry"),
                    j =>
                    {
                        j.HasKey("EnquiryID_FK", "CodeID_FK");
                        j.ToTable("EnquiryServicesRequired", tb => tb.HasTrigger("tr_EnquiryServicesRequired"));
                    });
        });

        modelBuilder.Entity<EnquiryAttachment>(entity =>
        {
            entity.ToTable("EnquiryAttachment", tb => tb.HasTrigger("tr_EnquiryAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type).HasMaxLength(50);

            entity.HasOne(d => d.EnquiryID_FKNavigation).WithMany(p => p.EnquiryAttachments)
                .HasForeignKey(d => d.EnquiryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EnquiryAttachment_Enquiry");
        });

        modelBuilder.Entity<EnquiryConfig>(entity =>
        {
            entity.ToTable("EnquiryConfig", tb => tb.HasTrigger("tr_EnquiryConfig"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EscalationPeriod).HasColumnType("decimal(2, 0)");
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.EscalatingPersonID_FKNavigation).WithMany(p => p.EnquiryConfigEscalatingPersonID_FKNavigations)
                .HasForeignKey(d => d.EscalatingPersonID_FK)
                .HasConstraintName("FK_EnquiryConfig_Users_EscPersonID");

            entity.HasOne(d => d.SCMID_FKNavigation).WithMany(p => p.EnquiryConfigSCMID_FKNavigations)
                .HasForeignKey(d => d.SCMID_FK)
                .HasConstraintName("FK_EnquiryConfig_Users_SCMID");

            entity.HasMany(d => d.UserID_FKs).WithMany(p => p.EnquiryConfigs)
                .UsingEntity<Dictionary<string, object>>(
                    "EnquiryEscPerson",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryEscPerson_Users"),
                    l => l.HasOne<EnquiryConfig>().WithMany()
                        .HasForeignKey("EnquiryConfigID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquiryEscPerson_EnquiryConfig"),
                    j =>
                    {
                        j.HasKey("EnquiryConfigID", "UserID_FK");
                        j.ToTable("EnquiryEscPerson", tb => tb.HasTrigger("tr_EnquiryEscPerson"));
                    });

            entity.HasMany(d => d.UserID_FKsNavigation).WithMany(p => p.EnquiryConfigID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "EnquirySCM",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquirySCM_Users"),
                    l => l.HasOne<EnquiryConfig>().WithMany()
                        .HasForeignKey("EnquiryConfigID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_EnquirySCM_EnquiryConfig"),
                    j =>
                    {
                        j.HasKey("EnquiryConfigID_FK", "UserID_FK");
                        j.ToTable("EnquirySCM", tb => tb.HasTrigger("tr_EnquirySCM"));
                    });
        });

        modelBuilder.Entity<ErrorLog>(entity =>
        {
            entity.ToTable("ErrorLog");

            entity.Property(e => e.DateCreated);
            entity.Property(e => e.ErrorDetails).IsRequired();
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.ToTable("Event", tb => tb.HasTrigger("tr_Event"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EventName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FromDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ToDate);

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.Events)
                .HasForeignKey(d => d.CreatedBy_FK)
                .HasConstraintName("FK_Event_Users");

            entity.HasOne(d => d.EventTypeID_FKNavigation).WithMany(p => p.EventEventTypeID_FKNavigations)
                .HasForeignKey(d => d.EventTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Event_Code1");

            entity.HasOne(d => d.PeriodTypeID_FKNavigation).WithMany(p => p.EventPeriodTypeID_FKNavigations)
                .HasForeignKey(d => d.PeriodTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Event_Code2");

            entity.HasOne(d => d.UserCategory_FKNavigation).WithMany(p => p.Events)
                .HasForeignKey(d => d.UserCategory_FK)
                .HasConstraintName("FK_Event_UserCategory");
        });

        modelBuilder.Entity<EventUser>(entity =>
        {
            entity.ToTable("EventUser", tb => tb.HasTrigger("tr_EventUser"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.EventID_FKNavigation).WithMany(p => p.EventUsers)
                .HasForeignKey(d => d.EventID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventUser_Event");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.EventUsers)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventUser_Users");
        });

        modelBuilder.Entity<EventUserLog>(entity =>
        {
            entity.ToTable("EventUserLog", tb => tb.HasTrigger("tr_EventUserLog"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);

            entity.HasOne(d => d.EventID_FKNavigation).WithMany(p => p.EventUserLogs)
                .HasForeignKey(d => d.EventID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventUserLog_Event");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.EventUserLogs)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventUserLog_Users");
        });

        modelBuilder.Entity<ExternalDoctor>(entity =>
        {
            entity.ToTable("ExternalDoctor", tb => tb.HasTrigger("tr_ExternalDoctor"));

            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.ClinicianTypeID_FKNavigation).WithMany(p => p.ExternalDoctors)
                .HasForeignKey(d => d.ClinicianTypeID_FK)
                .HasConstraintName("FK_ExternalDoctor_UserType");
        });

        modelBuilder.Entity<Facility>(entity =>
        {
            entity.ToTable("Facility");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FacilityName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IntegrationSource).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e._id).HasMaxLength(100);

            entity.HasOne(d => d.OrganizationID_FKNavigation).WithMany(p => p.Facilities)
                .HasForeignKey(d => d.OrganizationID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Facility_Code");
        });

        modelBuilder.Entity<GeoFencing>(entity =>
        {
            entity.ToTable("GeoFencing", tb => tb.HasTrigger("tr_GeoFencing"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IP).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK_GroupUser");

            entity.ToTable("Group", tb => tb.HasTrigger("tr_Group"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<GroupRole>(entity =>
        {
            entity.HasKey(e => new { e.GroupId_FK, e.RoleId_FK });

            entity.ToTable("GroupRole", tb => tb.HasTrigger("tr_GroupRole"));

            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");

            entity.HasOne(d => d.GroupId_FKNavigation).WithMany(p => p.GroupRoles)
                .HasForeignKey(d => d.GroupId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupRole_Group");

            entity.HasOne(d => d.RoleId_FKNavigation).WithMany(p => p.GroupRoles)
                .HasForeignKey(d => d.RoleId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupRole_Role");
        });

        modelBuilder.Entity<InitialCareAssessment>(entity =>
        {
            entity.ToTable("InitialCareAssessment", tb => tb.HasTrigger("tr_InitialCareAssessment"));

            entity.Property(e => e.AddressIssue).HasMaxLength(255);
            entity.Property(e => e.AssistiveAids).HasMaxLength(100);
            entity.Property(e => e.BeliefInfluenced).HasMaxLength(255);
            entity.Property(e => e.BowelHabitsDays).HasMaxLength(5);
            entity.Property(e => e.BowelHabitsTimes).HasMaxLength(5);
            entity.Property(e => e.BowelSounds).HasMaxLength(100);
            entity.Property(e => e.BowelType).HasMaxLength(20);
            entity.Property(e => e.BreathSounds).HasMaxLength(100);
            entity.Property(e => e.Breathing).HasMaxLength(20);
            entity.Property(e => e.CAAlertness).HasMaxLength(50);
            entity.Property(e => e.CACommunication).HasMaxLength(50);
            entity.Property(e => e.Catheter).HasMaxLength(5);
            entity.Property(e => e.CatheterDateInserted);
            entity.Property(e => e.CatheterNextReviewDate);
            entity.Property(e => e.CatheterSize).HasMaxLength(10);
            entity.Property(e => e.CatheterType).HasMaxLength(50);
            entity.Property(e => e.Concern).HasMaxLength(255);
            entity.Property(e => e.ConsciousLevel).HasMaxLength(40);
            entity.Property(e => e.Cough).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DifficultyCopingYes).HasMaxLength(255);
            entity.Property(e => e.EmotionalState).HasMaxLength(20);
            entity.Property(e => e.EmotionalYes).HasMaxLength(255);
            entity.Property(e => e.Faith).HasMaxLength(255);
            entity.Property(e => e.GeneralCondition).HasMaxLength(20);
            entity.Property(e => e.GetSupport).HasMaxLength(255);
            entity.Property(e => e.GiveMeaningToLife).HasMaxLength(255);
            entity.Property(e => e.Hearing).HasMaxLength(50);
            entity.Property(e => e.HearingImpairedRemarks).HasMaxLength(500);
            entity.Property(e => e.HearingImpairedWithHearingAidRemarks).HasMaxLength(500);
            entity.Property(e => e.HomeFacilityRemarks).HasMaxLength(500);
            entity.Property(e => e.HowCanIHelp).HasMaxLength(255);
            entity.Property(e => e.HowDoYouScope).HasMaxLength(255);
            entity.Property(e => e.IncontinenceType).HasMaxLength(20);
            entity.Property(e => e.InfluenceTakeCare).HasMaxLength(255);
            entity.Property(e => e.LMP);
            entity.Property(e => e.LostInterestYes).HasMaxLength(255);
            entity.Property(e => e.MakeSense).HasMaxLength(255);
            entity.Property(e => e.MedicalHistory).HasMaxLength(1000);
            entity.Property(e => e.MilkFeedRx).HasMaxLength(255);
            entity.Property(e => e.MobilityStatus).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.O2Litres).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.O2LitresVia).HasMaxLength(40);
            entity.Property(e => e.Oralhealth).HasMaxLength(100);
            entity.Property(e => e.OtherBreathing).HasMaxLength(255);
            entity.Property(e => e.OtherEmotionalState).HasMaxLength(255);
            entity.Property(e => e.OxygenLMin).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.OxygenRemark).HasMaxLength(255);
            entity.Property(e => e.OxygenType).HasMaxLength(100);
            entity.Property(e => e.Palpation).HasMaxLength(100);
            entity.Property(e => e.Percussion).HasMaxLength(100);
            entity.Property(e => e.PersonalConcern).HasMaxLength(255);
            entity.Property(e => e.Physique).HasMaxLength(20);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.RoleOfBeliefForCommunity).HasMaxLength(255);
            entity.Property(e => e.RoleOfBeliefForInfluence).HasMaxLength(255);
            entity.Property(e => e.SectionStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SkinIssue).HasMaxLength(100);
            entity.Property(e => e.SkinTurgor).HasMaxLength(100);
            entity.Property(e => e.SkinType).HasMaxLength(100);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Stoma).HasMaxLength(5);
            entity.Property(e => e.StomaAmountOfOutput).HasMaxLength(50);
            entity.Property(e => e.StomaAppearance).HasMaxLength(20);
            entity.Property(e => e.StomaColour).HasMaxLength(20);
            entity.Property(e => e.StomaCreatedDate);
            entity.Property(e => e.StomaEffluent).HasMaxLength(50);
            entity.Property(e => e.StomaOstomyProductUsed).HasMaxLength(500);
            entity.Property(e => e.StomaPeristomalSkin).HasMaxLength(20);
            entity.Property(e => e.StomaProtrusion).HasMaxLength(50);
            entity.Property(e => e.StomaReviewDate);
            entity.Property(e => e.StomaSizeBreath).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StomaSizeLength).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.StoolsType).HasMaxLength(20);
            entity.Property(e => e.SupportTo).HasMaxLength(255);
            entity.Property(e => e.TalkToSomeone).HasMaxLength(255);
            entity.Property(e => e.Teeth).HasMaxLength(100);
            entity.Property(e => e.TenderNGuarding).HasMaxLength(100);
            entity.Property(e => e.TracheostomyDateInserted);
            entity.Property(e => e.TracheostomyNextReviewDate);
            entity.Property(e => e.TracheostomySize).HasMaxLength(10);
            entity.Property(e => e.TracheostomyType).HasMaxLength(50);
            entity.Property(e => e.UrinaryFrequencyDay).HasMaxLength(5);
            entity.Property(e => e.UrinaryFrequencyTimes).HasMaxLength(5);
            entity.Property(e => e.UrinaryTypes).HasMaxLength(500);
            entity.Property(e => e.UrineColour).HasMaxLength(20);
            entity.Property(e => e.UrineConsistency).HasMaxLength(20);
            entity.Property(e => e.UseOfDrugExplain).HasMaxLength(1000);
            entity.Property(e => e.VSIntermittent).HasMaxLength(20);
            entity.Property(e => e.VSLocation).HasMaxLength(255);
            entity.Property(e => e.VSOnSetDate);
            entity.Property(e => e.VSPainFrequency).HasMaxLength(20);
            entity.Property(e => e.VSPrecipitatingFactors).HasMaxLength(255);
            entity.Property(e => e.VSQuality).HasMaxLength(20);
            entity.Property(e => e.VSRelievingFactors).HasMaxLength(255);
            entity.Property(e => e.Vision).HasMaxLength(20);
            entity.Property(e => e.VisionImpairedCataractRemarks).HasMaxLength(500);
            entity.Property(e => e.VisionImpairedGlaucomaRemarks).HasMaxLength(500);
            entity.Property(e => e.VisionImpairedRemarks).HasMaxLength(500);
            entity.Property(e => e.VisitDateTime);
            entity.Property(e => e.painOnSetDate);

            entity.HasOne(d => d.PatientAdditionalInfoID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientAdditionalInfoID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientAdditionalInfo");

            entity.HasOne(d => d.PatientMBIID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientMBIID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientMBI");

            entity.HasOne(d => d.PatientMFSID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientMFSID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientMFS");

            entity.HasOne(d => d.PatientMedicationID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientMedicationID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientMedication");

            entity.HasOne(d => d.PatientNutritionID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientNutritionID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientNutrition");

            entity.HasOne(d => d.PatientProfileID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientProfileID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientProfile");

            entity.HasOne(d => d.PatientRAFID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientRAFID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientRAF");

            entity.HasOne(d => d.PatientReferralID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.PatientReferralID_FK)
                .HasConstraintName("FK_InitialCareAssessment_PatientReferral");

            entity.HasOne(d => d.VitalSignID_FKNavigation).WithMany(p => p.InitialCareAssessments)
                .HasForeignKey(d => d.VitalSignID_FK)
                .HasConstraintName("FK_InitialCareAssessment_VitalSigns");

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.InitialCareAssessmentID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "ICAWoundCare",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ICAWoundCare_Code"),
                    l => l.HasOne<InitialCareAssessment>().WithMany()
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ICAWoundCare_InitialCareAssessment"),
                    j =>
                    {
                        j.HasKey("InitialCareAssessmentID_FK", "CodeID_FK");
                        j.ToTable("ICAWoundCare", tb => tb.HasTrigger("tr_ICAWoundCare"));
                    });
        });

        modelBuilder.Entity<InitialCareAssessmentAttachment>(entity =>
        {
            entity.ToTable("InitialCareAssessmentAttachment", tb => tb.HasTrigger("tr_InitialCareAssessmentAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.InitialCareAssessmentAttachments)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InitialCareAssessmentAttachment_InitialCareAssessment");
        });

        modelBuilder.Entity<InitialCareAssessmentSpecialInstruction>(entity =>
        {
            entity.ToTable("InitialCareAssessmentSpecialInstruction", tb => tb.HasTrigger("tr_InitialCareAssessmentSpecialInstruction"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.Instructions).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.StartDate);

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.InitialCareAssessmentSpecialInstructions)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InitialCareAssessmentSpecialInstruction_InitialCareAssessment");
        });

        modelBuilder.Entity<InitialCareAssessmentVitalSign>(entity =>
        {
            entity.HasKey(e => new { e.InitialCareAssessmentID_FK, e.VitalSignID_FK });

            entity.ToTable("InitialCareAssessmentVitalSign", tb => tb.HasTrigger("tr_InitialCareAssessmentVitalSign"));

            entity.Property(e => e.TimeOfRecord);
        });

        modelBuilder.Entity<IntegrationApiRequestLog>(entity =>
        {
            entity.HasKey(e => e.IntegrationApiRequestLogID).HasName("PK__Integrat__5749CA7CC431EC3C");

            entity.ToTable("IntegrationApiRequestLog");

            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.FacilityId).HasMaxLength(50);
            entity.Property(e => e.IntegrationSource)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ResidentId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("(now())")
                ;
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(500);
        });

        modelBuilder.Entity<Intervention>(entity =>
        {
            entity.ToTable("Intervention", tb => tb.HasTrigger("tr_Intervention"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.InterventionInfo)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.Interventions)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Intervention_Disease");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.ToTable("Item", tb => tb.HasTrigger("tr_Item"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CategoryID_FKNavigation).WithMany(p => p.ItemCategoryID_FKNavigations)
                .HasForeignKey(d => d.CategoryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_Code");

            entity.HasOne(d => d.ItemUnitID_FKNavigation).WithMany(p => p.ItemItemUnitID_FKNavigations)
                .HasForeignKey(d => d.ItemUnitID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Item_Code1");
        });

        modelBuilder.Entity<ItemStock>(entity =>
        {
            entity.ToTable("ItemStock", tb => tb.HasTrigger("tr_ItemStock"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.ItemID_FKNavigation).WithMany(p => p.ItemStocks)
                .HasForeignKey(d => d.ItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemStock_Item");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.ToTable("Language");

            entity.Property(e => e.FullName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LoginDevice>(entity =>
        {
            entity.ToTable("LoginDevice", tb => tb.HasTrigger("tr_LoginDevice"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceID)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DeviceType)
                .IsRequired()
                .HasMaxLength(8);
        });

        modelBuilder.Entity<MailSetting>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("tr_MailSettings"));

            entity.Property(e => e.id).ValueGeneratedNever();
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.msgBCC).HasMaxLength(255);
            entity.Property(e => e.msgCC).HasMaxLength(255);
            entity.Property(e => e.msgTo).HasMaxLength(255);

            entity.HasMany(d => d.UserTypeID_FKs).WithMany(p => p.MailSetting_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "MailSettingsMsgToUserType",
                    r => r.HasOne<UserType>().WithMany()
                        .HasForeignKey("UserTypeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MailSettingsMsgToUserType_UserType"),
                    l => l.HasOne<MailSetting>().WithMany()
                        .HasForeignKey("MailSetting_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_MailSettingsMsgToUserType_id"),
                    j =>
                    {
                        j.HasKey("MailSetting_FK", "UserTypeID_FK");
                        j.ToTable("MailSettingsMsgToUserType");
                    });
        });

        modelBuilder.Entity<MedicationVitalSignType>(entity =>
        {
            entity.ToTable("MedicationVitalSignType", tb => tb.HasTrigger("tr_MedicationVitalSignType"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.MedicationID_FKNavigation).WithMany(p => p.MedicationVitalSignTypes)
                .HasForeignKey(d => d.MedicationID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MedicationVitalSignType_Code");

            entity.HasOne(d => d.VitalSignTypeID_FKNavigation).WithMany(p => p.MedicationVitalSignTypes)
                .HasForeignKey(d => d.VitalSignTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MedicationVitalSignType_VitalSignTypes");
        });

        modelBuilder.Entity<MobileAppVersioning>(entity =>
        {
            entity.HasKey(e => e.MobileVersionId);

            entity.ToTable("MobileAppVersioning", tb => tb.HasTrigger("tr_MobileAppVersioning"));

            entity.Property(e => e.AppName).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceType).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Version).HasMaxLength(50);

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.MobileAppVersioningCreatedBy_FKNavigations)
                .HasForeignKey(d => d.CreatedBy_FK)
                .HasConstraintName("FK_MobileAppVersioning_User_CreatedBy");

            entity.HasOne(d => d.ModifiedBy_FKNavigation).WithMany(p => p.MobileAppVersioningModifiedBy_FKNavigations)
                .HasForeignKey(d => d.ModifiedBy_FK)
                .HasConstraintName("FK_MobileAppVersioning_User_ModifiedBy");
        });

        modelBuilder.Entity<MultiDisciplinaryMeeting>(entity =>
        {
            entity.ToTable("MultiDisciplinaryMeeting", tb => tb.HasTrigger("tr_MultiDisciplinaryMeeting"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.IssuesOverall).IsRequired();
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).IsRequired();

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.MultiDisciplinaryMeetings)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiDisciplinaryMeeting_Patient");
        });

        modelBuilder.Entity<MultiDisciplinaryMeetingDetail>(entity =>
        {
            entity.ToTable("MultiDisciplinaryMeetingDetail", tb => tb.HasTrigger("tr_MultiDisciplinaryMeetingDetail"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.IssueContent).IsRequired();
            entity.Property(e => e.IssueTitle).IsRequired();
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.MultiDisciplinaryMeetingID_FKNavigation).WithMany(p => p.MultiDisciplinaryMeetingDetails)
                .HasForeignKey(d => d.MultiDisciplinaryMeetingID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MultiDisciplinaryMeetingDetail_MultiDisciplinaryMeeting");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Notifica__3213E83F5EF36BEC");

            entity.ToTable(tb => tb.HasTrigger("tr_Notifications"));

            entity.HasIndex(e => new { e.userId, e.isRead }, "idx_Notifications1");

            entity.HasIndex(e => e.isRead, "idx_Notifications2");

            entity.HasIndex(e => e.userId, "idx_Notifications3");

            entity.Property(e => e.createdDate);
            entity.Property(e => e.notificationTypeCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.updatedDate);

            entity.HasOne(d => d.FacilityID_FKNavigation).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.FacilityID_FK)
                .HasConstraintName("FK_Notifications_Facility");

            entity.HasOne(d => d.notificationTypeCodeNavigation).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.notificationTypeCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Notifications_notificationTypeCode");

            entity.HasOne(d => d.user).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.userId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_Notifications_userId");
        });

        modelBuilder.Entity<NotificationChat>(entity =>
        {
            entity.ToTable("NotificationChat", tb => tb.HasTrigger("tr_NotificationChat"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.ChatID_FKNavigation).WithMany(p => p.NotificationChats)
                .HasForeignKey(d => d.ChatID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationChat_Chat");

            entity.HasOne(d => d.NotificationId_FKNavigation).WithMany(p => p.NotificationChats)
                .HasForeignKey(d => d.NotificationId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationChat_Notifications");
        });

        modelBuilder.Entity<NotificationEvent>(entity =>
        {
            entity.ToTable("NotificationEvent", tb => tb.HasTrigger("tr_NotificationEvent"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.EventID_FKNavigation).WithMany(p => p.NotificationEvents)
                .HasForeignKey(d => d.EventID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationEvent_Event");

            entity.HasOne(d => d.NotificationId_FKNavigation).WithMany(p => p.NotificationEvents)
                .HasForeignKey(d => d.NotificationId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationEvent_Notifications");
        });

        modelBuilder.Entity<NotificationMessageTemplate>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Notifica__3213E83FC46BAAC6");

            entity.ToTable(tb => tb.HasTrigger("tr_NotificationMessageTemplates"));

            entity.HasIndex(e => e.notificationgroupCode, "idx_NotificationMessageTemplates1");

            entity.Property(e => e.createdDate);
            entity.Property(e => e.notificationMessage)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.notificationSubject).HasMaxLength(200);
            entity.Property(e => e.notificationgroupCode)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.updatedDate);

            entity.HasOne(d => d.notificationgroupCodeNavigation).WithMany(p => p.NotificationMessageTemplates)
                .HasForeignKey(d => d.notificationgroupCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_NotificationMessageTemplates_notificationgroupCode");
        });

        modelBuilder.Entity<NotificationTask>(entity =>
        {
            entity.ToTable("NotificationTask", tb => tb.HasTrigger("tr_NotificationTask"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.NotificationId_FKNavigation).WithMany(p => p.NotificationTasks)
                .HasForeignKey(d => d.NotificationId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationTask_Notifications");

            entity.HasOne(d => d.TaskID_FKNavigation).WithMany(p => p.NotificationTasks)
                .HasForeignKey(d => d.TaskID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationTask_Task");
        });

        modelBuilder.Entity<NotificationVitalSignDetail>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Notifica__3213E83F3CF99FFF");

            entity.ToTable(tb => tb.HasTrigger("tr_NotificationVitalSignDetails"));

            entity.HasIndex(e => new { e.notificationId, e.VitalSignDetailId }, "idx_NotificationVitalSignDetails1");

            entity.Property(e => e.createdDate);
            entity.Property(e => e.updatedDate);

            entity.HasOne(d => d.VitalSignDetail).WithMany(p => p.NotificationVitalSignDetails)
                .HasForeignKey(d => d.VitalSignDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationVitalSignDetails_VitalSignDetails");

            entity.HasOne(d => d.notification).WithMany(p => p.NotificationVitalSignDetails)
                .HasForeignKey(d => d.notificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_NotificationVitalSignDetails_notificationId");
        });

        modelBuilder.Entity<NutritionTask>(entity =>
        {
            entity.ToTable("NutritionTask", tb => tb.HasTrigger("tr_NutritionTask"));

            entity.Property(e => e.AfterImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BeforeImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndTime);
            entity.Property(e => e.Food).HasMaxLength(255);
            entity.Property(e => e.Liquid).HasMaxLength(50);
            entity.Property(e => e.Method).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.StartTime);
            entity.Property(e => e.Unit).HasMaxLength(10);

            entity.HasOne(d => d.ActionTypeID_FKNavigation).WithMany(p => p.NutritionTasks)
                .HasForeignKey(d => d.ActionTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NutritionTask_Code");

            entity.HasOne(d => d.AmountReferenceID_FKNavigation).WithMany(p => p.NutritionTaskAmountReferenceID_FKNavigations)
                .HasForeignKey(d => d.AmountReferenceID_FK)
                .HasConstraintName("FK_NutritionTask_NutritionTaskReference2");

            entity.HasOne(d => d.ColorReferenceID_FKNavigation).WithMany(p => p.NutritionTaskColorReferenceID_FKNavigations)
                .HasForeignKey(d => d.ColorReferenceID_FK)
                .HasConstraintName("FK_NutritionTask_NutritionTaskReference3");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.NutritionTasks)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_NutritionTask_Patient");

            entity.HasOne(d => d.TypeReferenceID_FKNavigation).WithMany(p => p.NutritionTaskTypeReferenceID_FKNavigations)
                .HasForeignKey(d => d.TypeReferenceID_FK)
                .HasConstraintName("FK_NutritionTask_NutritionTaskReference1");
        });

        modelBuilder.Entity<NutritionTaskReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceID);

            entity.ToTable("NutritionTaskReference", tb => tb.HasTrigger("tr_NutritionTaskReference"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReferenceImage)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CodeId_FKNavigation).WithMany(p => p.NutritionTaskReferences)
                .HasForeignKey(d => d.CodeId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NutritionTaskReference_Code");
        });

        modelBuilder.Entity<Otp>(entity =>
        {
            entity.ToTable("Otp", tb => tb.HasTrigger("tr_Otp"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.ToTable("Package", tb => tb.HasTrigger("tr_Package"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PackageDetails)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PackageName).HasMaxLength(255);

            entity.HasMany(d => d.PatientID_FKs).WithMany(p => p.PackageID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientPackage",
                    r => r.HasOne<Patient>().WithMany()
                        .HasForeignKey("PatientID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientPackage_Patient"),
                    l => l.HasOne<Package>().WithMany()
                        .HasForeignKey("PackageID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientPackage_Package"),
                    j =>
                    {
                        j.HasKey("PackageID_FK", "PatientID_FK");
                        j.ToTable("PatientPackage", tb => tb.HasTrigger("tr_PatientPackage"));
                    });
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.ToTable("Patient", tb => tb.HasTrigger("tr_Patient"));

            entity.Property(e => e.ActionDescription).HasMaxLength(255);
            entity.Property(e => e.AdmittedDate);
            entity.Property(e => e.CareReviewDate);
            entity.Property(e => e.CaseID).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateOfBirth);
            entity.Property(e => e.DisplayName).HasMaxLength(255);
            entity.Property(e => e.DrugAllergy).HasMaxLength(500);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GenogramPicture)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HomePhone).HasMaxLength(100);
            entity.Property(e => e.IdentificationAttachmentFilename).HasMaxLength(255);
            entity.Property(e => e.IdentificationAttachmentPhysical)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.IntegrationSourceID).HasMaxLength(100);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MailForFamilyNotification1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForFamilyNotification2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailForVitalAlert3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MailingAddress1).HasMaxLength(255);
            entity.Property(e => e.MailingAddress2).HasMaxLength(255);
            entity.Property(e => e.MailingAddress3).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NRIC)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.NursingStation).HasMaxLength(255);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderID).HasMaxLength(60);
            entity.Property(e => e.OtherLanguage).HasMaxLength(255);
            entity.Property(e => e.OtherRace).HasMaxLength(255);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Photo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.ReasonOfAdmission).HasMaxLength(500);
            entity.Property(e => e.ReferringDiagnosis).HasMaxLength(500);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VisitingFrequency).HasMaxLength(500);

            entity.HasOne(d => d.BloodTypeID_FKNavigation).WithMany(p => p.PatientBloodTypeID_FKNavigations)
                .HasForeignKey(d => d.BloodTypeID_FK)
                .HasConstraintName("FK_Patient_Code2");

            entity.HasOne(d => d.GenderID_FKNavigation).WithMany(p => p.PatientGenderID_FKNavigations)
                .HasForeignKey(d => d.GenderID_FK)
                .HasConstraintName("FK_Patient_Code1");

            entity.HasOne(d => d.InvoiceModeID_FKNavigation).WithMany(p => p.PatientInvoiceModeID_FKNavigations).HasForeignKey(d => d.InvoiceModeID_FK);

            entity.HasOne(d => d.MaritalStatusID_FKNavigation).WithMany(p => p.PatientMaritalStatusID_FKNavigations)
                .HasForeignKey(d => d.MaritalStatusID_FK)
                .HasConstraintName("FK_Patient_Code4");

            entity.HasOne(d => d.PatientAdditionalInfoID_FKNavigation).WithMany(p => p.Patients)
                .HasForeignKey(d => d.PatientAdditionalInfoID_FK)
                .HasConstraintName("FK_Patient_PatientAdditionalInfo");

            entity.HasOne(d => d.PatientMedicationID_FKNavigation).WithMany(p => p.Patients)
                .HasForeignKey(d => d.PatientMedicationID_FK)
                .HasConstraintName("FK_Patient_PatientMedication");

            entity.HasOne(d => d.PatientProfileID_FKNavigation).WithMany(p => p.Patients)
                .HasForeignKey(d => d.PatientProfileID_FK)
                .HasConstraintName("FK_Patient_PatientProfile");

            entity.HasOne(d => d.PatientReferralByID_FKNavigation).WithMany(p => p.PatientPatientReferralByID_FKNavigations)
                .HasForeignKey(d => d.PatientReferralByID_FK)
                .HasConstraintName("FK_Patient_Code7");

            entity.HasOne(d => d.PatientReferralID_FKNavigation).WithMany(p => p.Patients)
                .HasForeignKey(d => d.PatientReferralID_FK)
                .HasConstraintName("FK_Patient_PatientReferral");

            entity.HasOne(d => d.PatientTypeID_FKNavigation).WithMany(p => p.PatientPatientTypeID_FKNavigations)
                .HasForeignKey(d => d.PatientTypeID_FK)
                .HasConstraintName("FK_Patient_Code");

            entity.HasOne(d => d.RaceID_FKNavigation).WithMany(p => p.PatientRaceID_FKNavigations)
                .HasForeignKey(d => d.RaceID_FK)
                .HasConstraintName("FK_Patient_Code6");

            entity.HasOne(d => d.ReligionID_FKNavigation).WithMany(p => p.PatientReligionID_FKNavigations)
                .HasForeignKey(d => d.ReligionID_FK)
                .HasConstraintName("FK_Patient_Code5");

            entity.HasOne(d => d.ResidentTypeID_FKNavigation).WithMany(p => p.PatientResidentTypeID_FKNavigations)
                .HasForeignKey(d => d.ResidentTypeID_FK)
                .HasConstraintName("FK_Patient_Code3");

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.PatientID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientLanguage",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientLanguage_Code"),
                    l => l.HasOne<Patient>().WithMany()
                        .HasForeignKey("PatientID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientLanguage_Patient"),
                    j =>
                    {
                        j.HasKey("PatientID_FK", "CodeID_FK");
                        j.ToTable("PatientLanguage", tb => tb.HasTrigger("tr_PatientLanguage"));
                    });

            entity.HasMany(d => d.CodeID_FKsNavigation).WithMany(p => p.PatientID_FKsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientSpecialIndicator",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientSpecialIndicator_Code"),
                    l => l.HasOne<Patient>().WithMany()
                        .HasForeignKey("PatientID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientSpecialIndicator_Patient"),
                    j =>
                    {
                        j.HasKey("PatientID_FK", "CodeID_FK");
                        j.ToTable("PatientSpecialIndicator", tb => tb.HasTrigger("tr_PatientSpecialIndicator"));
                    });

            entity.HasMany(d => d.FacilityID_FKs).WithMany(p => p.PatientID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientFacility",
                    r => r.HasOne<Facility>().WithMany()
                        .HasForeignKey("FacilityID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientFacility_Facility"),
                    l => l.HasOne<Patient>().WithMany()
                        .HasForeignKey("PatientID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientFacility_Patient"),
                    j =>
                    {
                        j.HasKey("PatientID_FK", "FacilityID_FK");
                        j.ToTable("PatientFacility");
                    });
        });

        modelBuilder.Entity<PatientAMT>(entity =>
        {
            entity.ToTable("PatientAMT", tb => tb.HasTrigger("tr_PatientAMT"));

            entity.Property(e => e.Alertness).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.PatientAMTs)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_PatientAMT_CareReport");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientAMTs)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientAMT_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientAMTs)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientAMT_Patient");

            entity.HasOne(d => d.VitalSignDetailId_FKNavigation).WithMany(p => p.PatientAMTs)
                .HasForeignKey(d => d.VitalSignDetailId_FK)
                .HasConstraintName("FK_PatientAMT_VitalSignDetails");
        });

        modelBuilder.Entity<PatientAMTAnswer>(entity =>
        {
            entity.HasKey(e => new { e.PatientAMTID_FK, e.AMTQuestionID_FK });

            entity.ToTable("PatientAMTAnswer", tb => tb.HasTrigger("tr_PatientAMTAnswer"));

            entity.HasOne(d => d.AMTQuestionID_FKNavigation).WithMany(p => p.PatientAMTAnswers)
                .HasForeignKey(d => d.AMTQuestionID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientAMTAnswer_AMTQuestion");

            entity.HasOne(d => d.PatientAMTID_FKNavigation).WithMany(p => p.PatientAMTAnswers)
                .HasForeignKey(d => d.PatientAMTID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientAMTAnswer_PatientAMT");
        });

        modelBuilder.Entity<PatientAccessLine>(entity =>
        {
            entity.ToTable("PatientAccessLine", tb => tb.HasTrigger("tr_PatientAccessLine"));

            entity.Property(e => e.AccessLine)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.AccessLineRemarks).HasMaxLength(500);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DateDueForChange);
            entity.Property(e => e.DateOfInsertion);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Patent)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.PatentReSited).HasMaxLength(5);
            entity.Property(e => e.PatentReSitedDate);
            entity.Property(e => e.PatentSite).HasMaxLength(1000);

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.PatientAccessLines)
                .HasForeignKey(d => d.CareReportID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientAccessLine_CareReport");
        });

        modelBuilder.Entity<PatientAdditionalInfo>(entity =>
        {
            entity.ToTable("PatientAdditionalInfo", tb => tb.HasTrigger("tr_PatientAdditionalInfo"));

            entity.Property(e => e.ACP_DoneDate);
            entity.Property(e => e.ACP_ReviewDate);
            entity.Property(e => e.AICD_InsertDate);
            entity.Property(e => e.AICD_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.AICD_ReviewDate);
            entity.Property(e => e.CVCLine_InsertDate);
            entity.Property(e => e.CVCLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.CVCLine_ReviewDate);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DNR_DateInitiated);
            entity.Property(e => e.DNR_DateTerminated);
            entity.Property(e => e.DNR_InitiatedBy).HasMaxLength(255);
            entity.Property(e => e.DNR_TerminatedBy).HasMaxLength(255);
            entity.Property(e => e.IVLine_InsertDate);
            entity.Property(e => e.IVLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.IVLine_ReviewDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PICCLine_InsertDate);
            entity.Property(e => e.PICCLine_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.PICCLine_ReviewDate);
            entity.Property(e => e.Pacemaker_InsertDate);
            entity.Property(e => e.Pacemaker_InsertedBy).HasMaxLength(255);
            entity.Property(e => e.Pacemaker_ReviewDate);
        });

        modelBuilder.Entity<PatientAttachment>(entity =>
        {
            entity.ToTable("PatientAttachment", tb => tb.HasTrigger("tr_PatientAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientAttachments)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientAttachment_Patient");
        });

        modelBuilder.Entity<PatientBradenScale>(entity =>
        {
            entity.ToTable("PatientBradenScale", tb => tb.HasTrigger("tr_PatientBradenScale"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientBradenScales)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientBradenScale_VitalSignDetails");
        });

        modelBuilder.Entity<PatientClinician>(entity =>
        {
            entity.ToTable("PatientClinician", tb => tb.HasTrigger("tr_PatientClinician"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.DiseaseID_FK)
                .HasConstraintName("FK_PatientClinician_Disease");

            entity.HasOne(d => d.DiseaseSubInfoID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.DiseaseSubInfoID_FK)
                .HasConstraintName("FK_PatientClinician_DiseaseSubInfo");

            entity.HasOne(d => d.ExternalDoctorID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.ExternalDoctorID_FK)
                .HasConstraintName("FK_PatientClinician_ExternalDoctor");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientClinician_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientClinician_Patient");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.PatientClinicians)
                .HasForeignKey(d => d.UserID_FK)
                .HasConstraintName("FK_PatientClinician_Users");
        });

        modelBuilder.Entity<PatientDrugAllergy>(entity =>
        {
            entity.HasKey(e => e.DrugAllergyID).HasName("PK_PatientDrugAllery");

            entity.ToTable("PatientDrugAllergy", tb => tb.HasTrigger("tr_PatientDrugAllergy"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientDrugAllergies)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientDrugAllery_InitialCareAssessment");

            entity.HasOne(d => d.MedicationID_FKNavigation).WithMany(p => p.PatientDrugAllergyMedicationID_FKNavigations)
                .HasForeignKey(d => d.MedicationID_FK)
                .HasConstraintName("FK_PatientDrugAllergy_Code1");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientDrugAllergies)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientDrugAllery_Patient");

            entity.HasOne(d => d.ReactionID_FKNavigation).WithMany(p => p.PatientDrugAllergyReactionID_FKNavigations)
                .HasForeignKey(d => d.ReactionID_FK)
                .HasConstraintName("FK_PatientDrugAllergy_Code");

            entity.HasOne(d => d.ReferID_FKNavigation).WithMany(p => p.InverseReferID_FKNavigation)
                .HasForeignKey(d => d.ReferID_FK)
                .HasConstraintName("FK_PatientDrugAllergy_PatientDrugAllergy");
        });

        modelBuilder.Entity<PatientEBASDEP>(entity =>
        {
            entity.ToTable("PatientEBASDEP", tb => tb.HasTrigger("tr_PatientEBASDEP"));

            entity.Property(e => e.Alertness).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.PatientEBASDEPs)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_PatientEBASDEP_CareReport");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientEBASDEPs)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientEBASDEP_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientEBASDEPs)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientEBASDEP_Patient");

            entity.HasOne(d => d.VitalSignDetailId_FKNavigation).WithMany(p => p.PatientEBASDEPs)
                .HasForeignKey(d => d.VitalSignDetailId_FK)
                .HasConstraintName("FK_PatientEBASDEP_VitalSignDetails");
        });

        modelBuilder.Entity<PatientEBASDEPAnswer>(entity =>
        {
            entity.HasKey(e => new { e.PatientEBASDEPID_FK, e.EBASDEPQuestionID_FK });

            entity.ToTable("PatientEBASDEPAnswer", tb => tb.HasTrigger("tr_PatientEBASDEPAnswer"));

            entity.HasOne(d => d.EBASDEPQuestionID_FKNavigation).WithMany(p => p.PatientEBASDEPAnswers)
                .HasForeignKey(d => d.EBASDEPQuestionID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientEBASDEPAnswer_EBASDEPQuestion");

            entity.HasOne(d => d.PatientEBASDEPID_FKNavigation).WithMany(p => p.PatientEBASDEPAnswers)
                .HasForeignKey(d => d.PatientEBASDEPID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientEBASDEPAnswer_PatientEBASDEP");
        });

        modelBuilder.Entity<PatientFamilyHistory>(entity =>
        {
            entity.ToTable("PatientFamilyHistory", tb => tb.HasTrigger("tr_PatientFamilyHistory"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Relationship).HasMaxLength(50);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.PatientFamilyHistories)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientFamilyHistory_Disease");

            entity.HasOne(d => d.DiseaseSubInfoID_FKNavigation).WithMany(p => p.PatientFamilyHistories)
                .HasForeignKey(d => d.DiseaseSubInfoID_FK)
                .HasConstraintName("FK_PatientFamilyHistory_DiseaseSubInfo");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientFamilyHistories)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientFamilyHistory_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientFamilyHistories)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientFamilyHistory_Patient");
        });

        modelBuilder.Entity<PatientGC>(entity =>
        {
            entity.HasKey(e => e.PatientGCSID);

            entity.ToTable("PatientGCS", tb => tb.HasTrigger("tr_PatientGCS"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientGCs)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientGCS_VitalSignDetails");
        });

        modelBuilder.Entity<PatientImmunisation>(entity =>
        {
            entity.HasKey(e => e.ImmunisationID);

            entity.ToTable("PatientImmunisation", tb => tb.HasTrigger("tr_PatientImmunisation"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Date);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NextDate);
            entity.Property(e => e.Place).HasMaxLength(255);

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientImmunisations)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientImmunisation_Patient");
        });

        modelBuilder.Entity<PatientMBI>(entity =>
        {
            entity.ToTable("PatientMBI", tb => tb.HasTrigger("tr_PatientMBI"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientMBIs)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientMBI_VitalSignDetails");
        });

        modelBuilder.Entity<PatientMF>(entity =>
        {
            entity.HasKey(e => e.PatientMFSID);

            entity.ToTable("PatientMFS", tb => tb.HasTrigger("tr_PatientMFS"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientMFs)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientMFS_VitalSignDetails");
        });

        modelBuilder.Entity<PatientMMSE>(entity =>
        {
            entity.ToTable("PatientMMSE", tb => tb.HasTrigger("tr_PatientMMSE"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientMMSEs)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientMMSE_VitalSignDetails");
        });

        modelBuilder.Entity<PatientMedicalHistory>(entity =>
        {
            entity.ToTable("PatientMedicalHistory", tb => tb.HasTrigger("tr_PatientMedicalHistory"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.ClinicianID_FKNavigation).WithMany(p => p.PatientMedicalHistories)
                .HasForeignKey(d => d.ClinicianID_FK)
                .HasConstraintName("FK_PatientMedicalHistory_PatientClinician");

            entity.HasOne(d => d.MedicalStatusID_FKNavigation).WithMany(p => p.PatientMedicalHistories)
                .HasForeignKey(d => d.MedicalStatusID_FK)
                .HasConstraintName("FK_PatientMedicalHistory_Status");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientMedicalHistories)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientMedicalHistory_Patient");
        });

        modelBuilder.Entity<PatientMedication>(entity =>
        {
            entity.HasKey(e => e.PatientMedicationID).HasName("PK_PatientMedication_1");

            entity.ToTable("PatientMedication", tb => tb.HasTrigger("tr_PatientMedication"));

            entity.Property(e => e.Allergies).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasMany(d => d.SupplyID_FKs).WithMany(p => p.PatientMedicationID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientMedicationSupply",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("SupplyID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientMedicationSupply_Code"),
                    l => l.HasOne<PatientMedication>().WithMany()
                        .HasForeignKey("PatientMedicationID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientMedicationSupply_PatientMedication"),
                    j =>
                    {
                        j.HasKey("PatientMedicationID_FK", "SupplyID_FK");
                        j.ToTable("PatientMedicationSupply", tb => tb.HasTrigger("tr_PatientMedicationSupply"));
                    });
        });

        modelBuilder.Entity<PatientMedicationConsume>(entity =>
        {
            entity.ToTable("PatientMedicationConsume", tb => tb.HasTrigger("tr_PatientMedicationConsume"));

            entity.Property(e => e.ClinicHosp).HasMaxLength(50);
            entity.Property(e => e.ClinicHospED).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DrContact).HasMaxLength(50);
            entity.Property(e => e.DrContactED).HasMaxLength(50);
            entity.Property(e => e.DrName).HasMaxLength(50);
            entity.Property(e => e.DrNameED).HasMaxLength(50);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.Indication).HasMaxLength(255);
            entity.Property(e => e.MCRNo).HasMaxLength(50);
            entity.Property(e => e.MCRNoED).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReasonOfDiscontinue).HasMaxLength(200);
            entity.Property(e => e.StartDate);

            entity.HasOne(d => d.AcutePRNIndicationID_FKNavigation).WithMany(p => p.PatientMedicationConsumeAcutePRNIndicationID_FKNavigations)
                .HasForeignKey(d => d.AcutePRNIndicationID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Code3");

            entity.HasOne(d => d.ChronicDiseaseID_FKNavigation).WithMany(p => p.PatientMedicationConsumes)
                .HasForeignKey(d => d.ChronicDiseaseID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Disease");

            entity.HasOne(d => d.ChronicDiseaseSubInfoID_FKNavigation).WithMany(p => p.PatientMedicationConsumes)
                .HasForeignKey(d => d.ChronicDiseaseSubInfoID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_DiseaseSubInfo");

            entity.HasOne(d => d.DosageID_FKNavigation).WithMany(p => p.PatientMedicationConsumeDosageID_FKNavigations)
                .HasForeignKey(d => d.DosageID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Code1");

            entity.HasOne(d => d.FrequencyID_FKNavigation).WithMany(p => p.PatientMedicationConsumeFrequencyID_FKNavigations)
                .HasForeignKey(d => d.FrequencyID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Code2");

            entity.HasOne(d => d.InstructedBy2ID_FKNavigation).WithMany(p => p.PatientMedicationConsumeInstructedBy2ID_FKNavigations)
                .HasForeignKey(d => d.InstructedBy2ID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_InstructedBy2ID_FK");

            entity.HasOne(d => d.InstructedByID_FKNavigation).WithMany(p => p.PatientMedicationConsumeInstructedByID_FKNavigations)
                .HasForeignKey(d => d.InstructedByID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_InstructedByID_FK");

            entity.HasOne(d => d.MedicationID_FKNavigation).WithMany(p => p.PatientMedicationConsumeMedicationID_FKNavigations)
                .HasForeignKey(d => d.MedicationID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Code4");

            entity.HasOne(d => d.PatientMedicationID_FKNavigation).WithMany(p => p.PatientMedicationConsumes)
                .HasForeignKey(d => d.PatientMedicationID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientMedicationConsume_PatientMedication");

            entity.HasOne(d => d.ReferID_FKNavigation).WithMany(p => p.InverseReferID_FKNavigation)
                .HasForeignKey(d => d.ReferID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_PatientMedicationConsume");

            entity.HasOne(d => d.RouteID_FKNavigation).WithMany(p => p.PatientMedicationConsumeRouteID_FKNavigations)
                .HasForeignKey(d => d.RouteID_FK)
                .HasConstraintName("FK_PatientMedicationConsume_Code");
        });

        modelBuilder.Entity<PatientMedicationConsumeAttachment>(entity =>
        {
            entity.ToTable("PatientMedicationConsumeAttachment", tb => tb.HasTrigger("tr_PatientMedicationConsumeAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Filename).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Physical)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.PatientMedicationConsumeID_FKNavigation).WithMany(p => p.PatientMedicationConsumeAttachments)
                .HasForeignKey(d => d.PatientMedicationConsumeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientMedicationConsumeAttachment_PatientMedicationConsume");
        });

        modelBuilder.Entity<PatientNutrition>(entity =>
        {
            entity.ToTable("PatientNutrition", tb => tb.HasTrigger("tr_PatientNutrition"));

            entity.Property(e => e.Appetite).HasMaxLength(20);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DiagnosedDysphasiaLastReviewDate);
            entity.Property(e => e.Diet).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowing).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingDateDue);
            entity.Property(e => e.EatingAndSwallowingDateInserted);
            entity.Property(e => e.EatingAndSwallowingSize).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingTypeOfTube).HasMaxLength(20);
            entity.Property(e => e.EatingAndSwallowingTypeOfTubeFeeding).HasMaxLength(20);
            entity.Property(e => e.Enteralfeeding).HasMaxLength(20);
            entity.Property(e => e.FluidConsistency).HasMaxLength(20);
            entity.Property(e => e.FluidRestrictionMLSPerDay).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.IVtherapyMLSPerDay).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.IVtherapyStateType).HasMaxLength(255);
            entity.Property(e => e.MilkFeedAmt).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.SizeofPEGJtube).HasMaxLength(20);
            entity.Property(e => e.WaterPerDay).HasColumnType("decimal(4, 0)");
        });

        modelBuilder.Entity<PatientOtherAllergy>(entity =>
        {
            entity.HasKey(e => e.OtherAllergyID);

            entity.ToTable("PatientOtherAllergy", tb => tb.HasTrigger("tr_PatientOtherAllergy"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.DescriptionID_FKNavigation).WithMany(p => p.PatientOtherAllergyDescriptionID_FKNavigations)
                .HasForeignKey(d => d.DescriptionID_FK)
                .HasConstraintName("FK_PatientOtherAllergy_Code1");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientOtherAllergies)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientOtherAllergy_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientOtherAllergies)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientOtherAllergy_Patient");

            entity.HasOne(d => d.ReactionID_FKNavigation).WithMany(p => p.PatientOtherAllergyReactionID_FKNavigations)
                .HasForeignKey(d => d.ReactionID_FK)
                .HasConstraintName("FK_PatientOtherAllergy_Code");

            entity.HasOne(d => d.ReferID_FKNavigation).WithMany(p => p.InverseReferID_FKNavigation)
                .HasForeignKey(d => d.ReferID_FK)
                .HasConstraintName("FK_PatientOtherAllergy_PatientDrugAllergy");
        });

        modelBuilder.Entity<PatientProfile>(entity =>
        {
            entity.ToTable("PatientProfile", tb => tb.HasTrigger("tr_PatientProfile"));

            entity.Property(e => e.Bed).HasMaxLength(255);
            entity.Property(e => e.BillingAddress1).HasMaxLength(255);
            entity.Property(e => e.BillingAddress2).HasMaxLength(255);
            entity.Property(e => e.BillingAddress3).HasMaxLength(255);
            entity.Property(e => e.BillingPostalCode).HasMaxLength(10);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.HomePhone).HasMaxLength(20);
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.MobilePhone).HasMaxLength(20);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.Organization).HasMaxLength(255);
            entity.Property(e => e.OtherReligion).HasMaxLength(255);
            entity.Property(e => e.Ward).HasMaxLength(255);

            entity.HasOne(d => d.BloodTypeID_FKNavigation).WithMany(p => p.PatientProfileBloodTypeID_FKNavigations)
                .HasForeignKey(d => d.BloodTypeID_FK)
                .HasConstraintName("FK_PatientProfile_Code");

            entity.HasOne(d => d.PatientOrganizationID_FKNavigation).WithMany(p => p.PatientProfilePatientOrganizationID_FKNavigations)
                .HasForeignKey(d => d.PatientOrganizationID_FK)
                .HasConstraintName("FK_PatientProfile_PatientOrganizationID_FK");

            entity.HasOne(d => d.ReligionID_FKNavigation).WithMany(p => p.PatientProfileReligionID_FKNavigations)
                .HasForeignKey(d => d.ReligionID_FK)
                .HasConstraintName("FK_PatientProfile_Code1");
        });

        modelBuilder.Entity<PatientRAF>(entity =>
        {
            entity.ToTable("PatientRAF", tb => tb.HasTrigger("tr_PatientRAF"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.VitalSignDetailID_FKNavigation).WithMany(p => p.PatientRAFs)
                .HasForeignKey(d => d.VitalSignDetailID_FK)
                .HasConstraintName("FK_PatientRAF_VitalSignDetails");
        });

        modelBuilder.Entity<PatientReferral>(entity =>
        {
            entity.ToTable("PatientReferral", tb => tb.HasTrigger("tr_PatientReferral"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FamilyAwareDiagnoseReason).HasMaxLength(255);
            entity.Property(e => e.FamilyAwarePrognosisReason).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PatientAwareDiagnoseReason).HasMaxLength(255);
            entity.Property(e => e.PatientAwarePrognosisReason).HasMaxLength(255);

            entity.HasOne(d => d.PrimaryClinicianID_FKNavigation).WithMany(p => p.PatientReferralPrimaryClinicianID_FKNavigations)
                .HasForeignKey(d => d.PrimaryClinicianID_FK)
                .HasConstraintName("FK_PatientReferral_PatientClinician2");

            entity.HasOne(d => d.PrimaryNurseID_FKNavigation).WithMany(p => p.PatientReferralPrimaryNurseID_FKNavigations)
                .HasForeignKey(d => d.PrimaryNurseID_FK)
                .HasConstraintName("FK_PatientReferral_PatientClinician4");

            entity.HasOne(d => d.SecondaryClinicianID_FKNavigation).WithMany(p => p.PatientReferralSecondaryClinicianID_FKNavigations)
                .HasForeignKey(d => d.SecondaryClinicianID_FK)
                .HasConstraintName("FK_PatientReferral_PatientClinician3");

            entity.HasOne(d => d.SecondaryNurseID_FKNavigation).WithMany(p => p.PatientReferralSecondaryNurseID_FKNavigations)
                .HasForeignKey(d => d.SecondaryNurseID_FK)
                .HasConstraintName("FK_PatientReferral_PatientClinician5");

            entity.HasMany(d => d.ServiceID_FKs).WithMany(p => p.PatientReferralID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientReferralService",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("ServiceID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientReferralService_Code"),
                    l => l.HasOne<PatientReferral>().WithMany()
                        .HasForeignKey("PatientReferralID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientReferralService_PatientReferral"),
                    j =>
                    {
                        j.HasKey("PatientReferralID_FK", "ServiceID_FK");
                        j.ToTable("PatientReferralService", tb => tb.HasTrigger("tr_PatientReferralService"));
                    });
        });

        modelBuilder.Entity<PatientSocialSupport>(entity =>
        {
            entity.ToTable("PatientSocialSupport", tb => tb.HasTrigger("tr_PatientSocialSupport"));

            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Firstname).HasMaxLength(255);
            entity.Property(e => e.Lastname).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType).HasMaxLength(255);

            entity.HasOne(d => d.GenderID_FKNavigation).WithMany(p => p.PatientSocialSupportGenderID_FKNavigations)
                .HasForeignKey(d => d.GenderID_FK)
                .HasConstraintName("FK_PatientSocialSupport_Code3");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientSocialSupports)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientSocialSupport_InitialCareAssessment");

            entity.HasOne(d => d.MaritalStatusID_FKNavigation).WithMany(p => p.PatientSocialSupportMaritalStatusID_FKNavigations)
                .HasForeignKey(d => d.MaritalStatusID_FK)
                .HasConstraintName("FK_PatientSocialSupport_Code");

            entity.HasOne(d => d.NationalityID_FKNavigation).WithMany(p => p.PatientSocialSupportNationalityID_FKNavigations)
                .HasForeignKey(d => d.NationalityID_FK)
                .HasConstraintName("FK_PatientSocialSupport_Code2");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientSocialSupports)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientSocialSupport_Patient");

            entity.HasOne(d => d.RelationshipID_FKNavigation).WithMany(p => p.PatientSocialSupportRelationshipID_FKNavigations)
                .HasForeignKey(d => d.RelationshipID_FK)
                .HasConstraintName("FK_PatientSocialSupport_Code1");
        });

        modelBuilder.Entity<PatientWound>(entity =>
        {
            entity.ToTable("PatientWound", tb => tb.HasTrigger("tr_PatientWound"));

            entity.Property(e => e.ActionDescription).HasMaxLength(255);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.LocationRemark).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OccurDate);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SeenDate);
            entity.Property(e => e.Site).IsRequired();
            entity.Property(e => e.Stage).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.PatientWounds)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_PatientWound_CareReport");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientWounds)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientWound_InitialCareAssessment");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientWounds)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientWound_Patient");

            entity.HasOne(d => d.WoundStatusID_FKNavigation).WithMany(p => p.PatientWounds)
                .HasForeignKey(d => d.WoundStatusID_FK)
                .HasConstraintName("FK_PatientWound_Code");
        });

        modelBuilder.Entity<PatientWoundDraft>(entity =>
        {
            entity.ToTable("PatientWoundDraft", tb => tb.HasTrigger("tr_PatientWoundDraft"));

            entity.Property(e => e.AnnotatedImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AnnotatedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssignDate);
            entity.Property(e => e.AverageDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DepthEighty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthForty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNans).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNegative).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthSixty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthTwenty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Edges).HasMaxLength(50);
            entity.Property(e => e.Epithelizing).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Exudate).HasMaxLength(50);
            entity.Property(e => e.ExudateNature).HasMaxLength(50);
            entity.Property(e => e.ExudatedConsistency).HasMaxLength(50);
            entity.Property(e => e.Granulation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ImageUpload)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MaximumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MeasurementUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.MinimumDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Necrosis).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.NextReviewDate);
            entity.Property(e => e.NextTreatmentDate);
            entity.Property(e => e.OccurDate);
            entity.Property(e => e.OriginalImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OriginalImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Others).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.PeriWound).HasMaxLength(50);
            entity.Property(e => e.Perimeter).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Rotation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SeenDate);
            entity.Property(e => e.Site).HasMaxLength(50);
            entity.Property(e => e.Size).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Slough).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Stage).HasMaxLength(50);
            entity.Property(e => e.SurfaceArea).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TCUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.TO_Comments).IsUnicode(false);
            entity.Property(e => e.UnderMining).HasMaxLength(255);
            entity.Property(e => e.VisitDate);
            entity.Property(e => e.Volume).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.WoundBedImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WoundBedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImageDistance).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.PatientWoundDrafts)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_PatientWoundDraft_Patient");

            entity.HasOne(d => d.PatientWoundID_FKNavigation).WithMany(p => p.PatientWoundDrafts)
                .HasForeignKey(d => d.PatientWoundID_FK)
                .HasConstraintName("FK_PatientWoundDraft_PatientWound");

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.PatientWoundDrafts)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .HasConstraintName("FK_PatientWoundDraft_PatientWoundVisit");

            entity.HasOne(d => d.WoundStatusID_FKNavigation).WithMany(p => p.PatientWoundDrafts)
                .HasForeignKey(d => d.WoundStatusID_FK)
                .HasConstraintName("FK_PatientWoundDraft_Code");

            entity.HasMany(d => d.ObjectiveID_FKs).WithMany(p => p.PatientWoundDraftID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientWoundDraftTreatmentObjective",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("ObjectiveID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundDraftTreatmentObjectives_Code"),
                    l => l.HasOne<PatientWoundDraft>().WithMany()
                        .HasForeignKey("PatientWoundDraftID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundDraftTreatmentObjectives_PatientWoundDraft"),
                    j =>
                    {
                        j.HasKey("PatientWoundDraftID_FK", "ObjectiveID_FK");
                        j.ToTable("PatientWoundDraftTreatmentObjectives");
                    });
        });

        modelBuilder.Entity<PatientWoundDraftTreatmentList>(entity =>
        {
            entity.HasKey(e => e.PatientWoundDraftTListID);

            entity.ToTable("PatientWoundDraftTreatmentList");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.HasOne(d => d.PatientWoundDraftID_FKNavigation).WithMany(p => p.PatientWoundDraftTreatmentLists)
                .HasForeignKey(d => d.PatientWoundDraftID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundDraftTreatmentList_PatientWoundDraft");

            entity.HasOne(d => d.TListItemID_FKNavigation).WithMany(p => p.PatientWoundDraftTreatmentLists)
                .HasForeignKey(d => d.TListItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundDraftTreatmentList_TreatmentListItem");
        });

        modelBuilder.Entity<PatientWoundReviewBy>(entity =>
        {
            entity.HasKey(e => e.PatientWoundReviewById).HasName("PK_THK_ICP_InputFrom");

            entity.ToTable("PatientWoundReviewBy", tb => tb.HasTrigger("tr_PatientWoundReviewBy"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReviewDate);

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.PatientWoundReviewBies)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .HasConstraintName("FK_PatientWoundReviewBy_PatientWoundVisit");

            entity.HasOne(d => d.UserId_FKNavigation).WithMany(p => p.PatientWoundReviewBies)
                .HasForeignKey(d => d.UserId_FK)
                .HasConstraintName("FK_PatientWoundReviewBy_Users");
        });

        modelBuilder.Entity<PatientWoundVisit>(entity =>
        {
            entity.ToTable("PatientWoundVisit", tb => tb.HasTrigger("tr_PatientWoundVisit"));

            entity.Property(e => e.AnnotatedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Appearance).HasMaxLength(50);
            entity.Property(e => e.AverageDepth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CleansingSolutionUsed).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DESIGN_R_Depth).HasMaxLength(50);
            entity.Property(e => e.Debridement).HasMaxLength(50);
            entity.Property(e => e.DepthEighty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthForty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthImage)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DepthImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepthMax).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNans).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthNegative).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthSixty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DepthTwenty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Edges).HasMaxLength(50);
            entity.Property(e => e.Exudate).HasMaxLength(50);
            entity.Property(e => e.ExudateSubInfo).HasMaxLength(50);
            entity.Property(e => e.ExudateSubInfo2).HasMaxLength(50);
            entity.Property(e => e.ImageUpload)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDraft).HasDefaultValue(false);
            entity.Property(e => e.IsRedness).HasDefaultValue(false);
            entity.Property(e => e.IsSmell).HasDefaultValue(false);
            entity.Property(e => e.IsSwelling).HasDefaultValue(false);
            entity.Property(e => e.IsWarmToTouch).HasDefaultValue(false);
            entity.Property(e => e.MaximumDepth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MeasurementUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.MinimumDepth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Model_jpg).IsUnicode(false);
            entity.Property(e => e.Model_mtl).IsUnicode(false);
            entity.Property(e => e.Model_obj).IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.NextReviewDate);
            entity.Property(e => e.NextTreatmentDate);
            entity.Property(e => e.OriginalImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PeriWound).HasMaxLength(50);
            entity.Property(e => e.Perimeter)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ProgressiveWoundStage).HasMaxLength(50);
            entity.Property(e => e.Rotation).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Size)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeDepth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeLength_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SizeWidth_Auto).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Smell).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Suffering).HasDefaultValue(0);
            entity.Property(e => e.SurfaceArea)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TCUpdateRemark).HasMaxLength(255);
            entity.Property(e => e.TC_AnnotatedImage).IsUnicode(false);
            entity.Property(e => e.TC_Auto_Epithelizing)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Granulation)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Necrosis)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Others)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Auto_Slough)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Epithelizing)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Granulation)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_IsAccept).HasDefaultValue(false);
            entity.Property(e => e.TC_Necrosis)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_OriginalImage).IsUnicode(false);
            entity.Property(e => e.TC_Others)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_Slough)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.TC_WoundBedImage).IsUnicode(false);
            entity.Property(e => e.TO_Comments).IsUnicode(false);
            entity.Property(e => e.Title).HasMaxLength(30);
            entity.Property(e => e.UnderMining).HasMaxLength(255);
            entity.Property(e => e.UnderMiningDepth)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(4, 1)");
            entity.Property(e => e.VisitDate);
            entity.Property(e => e.Volume)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.WoundBedImageMeasurement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WoundSubType).HasMaxLength(50);
            entity.Property(e => e.WoundType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WoundTypeOther).HasMaxLength(50);
            entity.Property(e => e.otherTissueName).IsUnicode(false);
            entity.Property(e => e.temperature).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.woundOverlaysImage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.woundOverlaysImageDistance).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.AssignedToID_FKNavigation).WithMany(p => p.PatientWoundVisits)
                .HasForeignKey(d => d.AssignedToID_FK)
                .HasConstraintName("FK_PatientWoundVisit_Users");

            entity.HasOne(d => d.CareReportID_FKNavigation).WithMany(p => p.PatientWoundVisits)
                .HasForeignKey(d => d.CareReportID_FK)
                .HasConstraintName("FK_PatientWoundVisit_CareReport");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.PatientWoundVisits)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_PatientWoundVisit_InitialCareAssessment");

            entity.HasOne(d => d.PatientWoundID_FKNavigation).WithMany(p => p.PatientWoundVisits)
                .HasForeignKey(d => d.PatientWoundID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundVisit_PatientWound");

            entity.HasOne(d => d.ReferID_FKNavigation).WithMany(p => p.InverseReferID_FKNavigation)
                .HasForeignKey(d => d.ReferID_FK)
                .HasConstraintName("FK_PatientWoundVisit_PatientWoundVisit");

            entity.HasOne(d => d.VitalSignID_FKNavigation).WithMany(p => p.PatientWoundVisits)
                .HasForeignKey(d => d.VitalSignID_FK)
                .HasConstraintName("FK_PatientWoundVisit_VitalSigns");

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.PatientWoundVisitID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientWoundVisitAppearance",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitAppearance_Code"),
                    l => l.HasOne<PatientWoundVisit>().WithMany()
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitAppearance_PatientWoundVisit"),
                    j =>
                    {
                        j.HasKey("PatientWoundVisitID_FK", "CodeID_FK");
                        j.ToTable("PatientWoundVisitAppearance", tb => tb.HasTrigger("tr_PatientWoundVisitAppearance"));
                    });

            entity.HasMany(d => d.CodeID_FKsNavigation).WithMany(p => p.PatientWoundVisitID_FKsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientWoundVisitCleansingItem",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitCleansingItem_Code"),
                    l => l.HasOne<PatientWoundVisit>().WithMany()
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitCleansingItem_PatientWoundVisit"),
                    j =>
                    {
                        j.HasKey("PatientWoundVisitID_FK", "CodeID_FK");
                        j.ToTable("PatientWoundVisitCleansingItem", tb => tb.HasTrigger("tr_PatientWoundVisitCleansingItem"));
                    });

            entity.HasMany(d => d.ObjectiveID_FKs).WithMany(p => p.PatientWoundVisitID_FKs1)
                .UsingEntity<Dictionary<string, object>>(
                    "PatientWoundVisitTreatmentObjective",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("ObjectiveID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitTreatmentObjectives_Code"),
                    l => l.HasOne<PatientWoundVisit>().WithMany()
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PatientWoundVisitTreatmentObjectives_PatientWoundVisit"),
                    j =>
                    {
                        j.HasKey("PatientWoundVisitID_FK", "ObjectiveID_FK");
                        j.ToTable("PatientWoundVisitTreatmentObjectives", tb => tb.HasTrigger("tr_PatientWoundVisitTreatmentObjectives"));
                    });
        });

        modelBuilder.Entity<PatientWoundVisitClinician>(entity =>
        {
            entity.ToTable("PatientWoundVisitClinician", tb => tb.HasTrigger("tr_PatientWoundVisitClinician"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.ExternalDoctorID_FKNavigation).WithMany(p => p.PatientWoundVisitClinicians)
                .HasForeignKey(d => d.ExternalDoctorID_FK)
                .HasConstraintName("FK_PatientWoundVisitClinician_ExternalDoctor");

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.PatientWoundVisitClinicians)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .HasConstraintName("FK_PatientWoundVisitClinician_PatientWoundVisit");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.PatientWoundVisitClinicians)
                .HasForeignKey(d => d.UserID_FK)
                .HasConstraintName("FK_PatientWoundVisitClinician_Users");
        });

        modelBuilder.Entity<PatientWoundVisitTreatment>(entity =>
        {
            entity.ToTable("PatientWoundVisitTreatment", tb => tb.HasTrigger("tr_PatientWoundVisitTreatment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.ItemID_FKNavigation).WithMany(p => p.PatientWoundVisitTreatments)
                .HasForeignKey(d => d.ItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundVisitTreatment_Item");

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.PatientWoundVisitTreatments)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundVisitTreatment_PatientWoundVisit");
        });

        modelBuilder.Entity<PatientWoundVisitTreatmentList>(entity =>
        {
            entity.HasKey(e => e.PatientWoundVisitTListID);

            entity.ToTable("PatientWoundVisitTreatmentList", tb => tb.HasTrigger("tr_PatientWoundVisitTreatmentList"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.PatientWoundVisitTreatmentLists)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundVisitTreatmentList_PatientWoundVisit");

            entity.HasOne(d => d.TListItemID_FKNavigation).WithMany(p => p.PatientWoundVisitTreatmentLists)
                .HasForeignKey(d => d.TListItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PatientWoundVisitTreatmentList_TreatmentListItem");
        });

        modelBuilder.Entity<ProblemList>(entity =>
        {
            entity.ToTable("ProblemList", tb => tb.HasTrigger("tr_ProblemList"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ProblemInfo)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.DiseaseID_FKNavigation).WithMany(p => p.ProblemLists)
                .HasForeignKey(d => d.DiseaseID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProblemList_Disease");
        });

        modelBuilder.Entity<ProblemListGoal>(entity =>
        {
            entity.ToTable("ProblemListGoal", tb => tb.HasTrigger("tr_ProblemListGoal"));

            entity.Property(e => e.Goal).HasMaxLength(500);

            entity.HasOne(d => d.Operator).WithMany(p => p.ProblemListGoalOperators)
                .HasForeignKey(d => d.OperatorID)
                .HasConstraintName("FK_ProblemListGoal_Operator");

            entity.HasOne(d => d.ProblemListID_FKNavigation).WithMany(p => p.ProblemListGoals)
                .HasForeignKey(d => d.ProblemListID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProblemListGoal_ProblemList");

            entity.HasOne(d => d.ScoreType).WithMany(p => p.ProblemListGoalScoreTypes)
                .HasForeignKey(d => d.ScoreTypeID)
                .HasConstraintName("FK_ProblemListGoal_ScoreType");
        });

        modelBuilder.Entity<Receipt>(entity =>
        {
            entity.HasKey(e => e.ReceiptID).HasName("PK__Receipt__CC08C400E8522DFD");

            entity.ToTable("Receipt", tb => tb.HasTrigger("tr_Receipt"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.GroupNumber)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ReceiptDate);
            entity.Property(e => e.ReceiptNumber)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TotalAmt).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.ReceiptCreatedBy_FKNavigations)
                .HasForeignKey(d => d.CreatedBy_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Receipt_Users");

            entity.HasOne(d => d.CurrencyID_FKNavigation).WithMany(p => p.ReceiptCurrencyID_FKNavigations)
                .HasForeignKey(d => d.CurrencyID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Receipt_Code1");

            entity.HasOne(d => d.ModifiedBy_FKNavigation).WithMany(p => p.ReceiptModifiedBy_FKNavigations)
                .HasForeignKey(d => d.ModifiedBy_FK)
                .HasConstraintName("FK_Receipt_Users1");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.Receipts)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Receipt_Patient");

            entity.HasOne(d => d.PaymentModeID_FKNavigation).WithMany(p => p.ReceiptPaymentModeID_FKNavigations)
                .HasForeignKey(d => d.PaymentModeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Receipt_Code");
        });

        modelBuilder.Entity<ReceiptForInvoice>(entity =>
        {
            entity.HasKey(e => e.ReceiptForInvoiceID).HasName("PK__ReceiptF__AAA44B1B702F8EEB");

            entity.ToTable("ReceiptForInvoice", tb => tb.HasTrigger("tr_ReceiptForInvoice"));

            entity.Property(e => e.Amt).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.BillingInvoiceID_FKNavigation).WithMany(p => p.ReceiptForInvoices)
                .HasForeignKey(d => d.BillingInvoiceID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiptForInv_Inv");

            entity.HasOne(d => d.ReceiptID_FKNavigation).WithMany(p => p.ReceiptForInvoices)
                .HasForeignKey(d => d.ReceiptID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiptForInv_Receipt");
        });

        modelBuilder.Entity<RecentView>(entity =>
        {
            entity.HasKey(e => new { e.UserID_FK, e.PatientID_FK });

            entity.ToTable("RecentView");

            entity.Property(e => e.DateView);

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.RecentViews)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecentView_Patient");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.RecentViews)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecentView_Users");
        });

        modelBuilder.Entity<RegisteredDevice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RegisteredDevice", tb => tb.HasTrigger("tr_RegisteredDevice"));

            entity.Property(e => e.DeviceID).ValueGeneratedOnAdd();
            entity.Property(e => e.DeviceToken).HasMaxLength(300);
        });

        modelBuilder.Entity<RegisteredDeviceV2>(entity =>
        {
            entity.HasKey(e => e.RegisteredDeviceID);

            entity.ToTable("RegisteredDeviceV2", tb => tb.HasTrigger("tr_RegisteredDeviceV2"));

            entity.Property(e => e.AppName).HasMaxLength(50);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceToken)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.DeviceType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FirstRegisterIpAddress)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Version).HasMaxLength(50);
        });

        modelBuilder.Entity<ResidentAssessmentCategory>(entity =>
        {
            entity.ToTable("ResidentAssessmentCategory", tb => tb.HasTrigger("tr_ResidentAssessmentCategory"));

            entity.Property(e => e.Category1Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category1Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category2Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category2Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category3Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category3Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category4Description)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Category4Recommendation)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<Resource>(entity =>
        {
            entity.ToTable("Resource");

            entity.HasOne(d => d.Code).WithMany(p => p.Resources)
                .HasForeignKey(d => d.CodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Resource_Code");

            entity.HasOne(d => d.Language).WithMany(p => p.Resources)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Resource_Language");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role", tb => tb.HasTrigger("tr_Role"));

            entity.Property(e => e.RoleId).ValueGeneratedNever();
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(now())")
                ;
            entity.Property(e => e.OptionText)
                .IsRequired()
                .HasMaxLength(250)
                .HasDefaultValue("");
            entity.Property(e => e.OptionType)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("");
            entity.Property(e => e.OptionValue)
                .IsRequired()
                .HasMaxLength(250)
                .HasDefaultValue("");
            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(250)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ScheduledTask>(entity =>
        {
            entity.HasKey(e => e.ScheduleId);

            entity.ToTable(tb => tb.HasTrigger("tr_ScheduledTasks"));

            entity.Property(e => e.ScheduleId).ValueGeneratedNever();
            entity.Property(e => e.IntervalType)
                .IsRequired()
                .HasMaxLength(1);
            entity.Property(e => e.LastRun);
            entity.Property(e => e.NextRun);
            entity.Property(e => e.PerformTask)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("D");
            entity.Property(e => e.ScheduleDescription)
                .IsRequired()
                .HasMaxLength(200)
                .HasDefaultValue("");
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(1)
                .HasDefaultValue("");
            entity.Property(e => e.TimeEnd);
            entity.Property(e => e.TimeStart);
            entity.Property(e => e.WeekDays)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ServiceForBilling>(entity =>
        {
            entity.ToTable("ServiceForBilling", tb => tb.HasTrigger("tr_ServiceForBilling"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Duration1)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Duration2).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.CategoryID_FKNavigation).WithMany(p => p.ServiceForBillings)
                .HasForeignKey(d => d.CategoryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceForBilling_Code");
        });

        modelBuilder.Entity<ServiceForBillingCost>(entity =>
        {
            entity.ToTable("ServiceForBillingCost", tb => tb.HasTrigger("tr_ServiceForBillingCost"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.CurrencyID_FKNavigation).WithMany(p => p.ServiceForBillingCosts)
                .HasForeignKey(d => d.CurrencyID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceForBillingCost_Code");

            entity.HasOne(d => d.ServiceForBillingID_FKNavigation).WithMany(p => p.ServiceForBillingCosts)
                .HasForeignKey(d => d.ServiceForBillingID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceForBillingCost_ServiceForBilling");
        });

        modelBuilder.Entity<SyncPatientLog>(entity =>
        {
            entity.HasKey(e => e.SyncLogId);

            entity.ToTable("SyncPatientLog", tb => tb.HasTrigger("tr_SyncPatientLog"));

            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<SyncWoundLog>(entity =>
        {
            entity.HasKey(e => e.SyncLogId);

            entity.ToTable("SyncWoundLog", tb => tb.HasTrigger("tr_SyncWoundLog"));

            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<SyncWoundVisitLog>(entity =>
        {
            entity.HasKey(e => e.SyncLogId);

            entity.ToTable("SyncWoundVisitLog", tb => tb.HasTrigger("tr_SyncWoundVisitLog"));

            entity.Property(e => e.CreatedDate);
        });

        modelBuilder.Entity<SysConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigName);

            entity.ToTable("SysConfig", tb => tb.HasTrigger("tr_SysConfig"));

            entity.Property(e => e.ConfigName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<SystemForDisease>(entity =>
        {
            entity.HasKey(e => e.SystemID);

            entity.ToTable("SystemForDisease", tb => tb.HasTrigger("tr_SystemForDisease"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.System).HasMaxLength(255);
        });

        modelBuilder.Entity<TD_WoundAssessmentFactor>(entity =>
        {
            entity.HasKey(e => new { e.TD_WoundAssessmentID_FK, e.CodeID_FK });

            entity.ToTable("TD_WoundAssessmentFactor", tb => tb.HasTrigger("tr_TD_WoundAssessmentFactor"));

            entity.HasOne(d => d.CodeID_FKNavigation).WithMany(p => p.TD_WoundAssessmentFactors)
                .HasForeignKey(d => d.CodeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TD_WoundAssessmentFactor_Code");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.ToTable("Task", tb => tb.HasTrigger("tr_Task"));

            entity.HasIndex(e => new { e.ReferenceType, e.ReferenceID }, "IX_Task_Reference");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.H2OFlushingMLS).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.Location).HasMaxLength(800);
            entity.Property(e => e.MedicationInstructions).HasMaxLength(255);
            entity.Property(e => e.MilkFeedVolumeMLS).HasColumnType("decimal(4, 0)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.OtherLocation).HasMaxLength(800);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Supplement).HasMaxLength(255);

            entity.HasOne(d => d.ActionTypeID_FKNavigation).WithMany(p => p.TaskActionTypeID_FKNavigations)
                .HasForeignKey(d => d.ActionTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Task_Code");

            entity.HasOne(d => d.CreatedBy_FKNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.CreatedBy_FK)
                .HasConstraintName("FK_Task_Users");

            entity.HasOne(d => d.DosageID_FKNavigation).WithMany(p => p.TaskDosageID_FKNavigations)
                .HasForeignKey(d => d.DosageID_FK)
                .HasConstraintName("FK_Task_Code2");

            entity.HasOne(d => d.FrequencyID_FKNavigation).WithMany(p => p.TaskFrequencyID_FKNavigations)
                .HasForeignKey(d => d.FrequencyID_FK)
                .HasConstraintName("FK_Task_Code1");

            entity.HasOne(d => d.InitialCareAssessmentID_FKNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.InitialCareAssessmentID_FK)
                .HasConstraintName("FK_Task_InitialCareAssessment");

            entity.HasOne(d => d.MedicationID_FKNavigation).WithMany(p => p.TaskMedicationID_FKNavigations)
                .HasForeignKey(d => d.MedicationID_FK)
                .HasConstraintName("FK_Task_Code3");

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_Task_Patient");

            entity.HasOne(d => d.UserCategory_FKNavigation).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.UserCategory_FK)
                .HasConstraintName("FK_Task_UserCategory");

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.TaskID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "TaskServicesRequired",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TaskServicesRequired_Code"),
                    l => l.HasOne<Task>().WithMany()
                        .HasForeignKey("TaskID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_TaskServicesRequired_Task"),
                    j =>
                    {
                        j.HasKey("TaskID_FK", "CodeID_FK");
                        j.ToTable("TaskServicesRequired", tb => tb.HasTrigger("tr_TaskServicesRequired"));
                    });
        });

        modelBuilder.Entity<TaskFileAttachment>(entity =>
        {
            entity.HasKey(e => e.FileAttachmentID);

            entity.ToTable("TaskFileAttachment", tb => tb.HasTrigger("tr_TaskFileAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.TaskID_FKNavigation).WithMany(p => p.TaskFileAttachments)
                .HasForeignKey(d => d.TaskID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskFileAttachment_Task");
        });

        modelBuilder.Entity<TaskSpecificDate>(entity =>
        {
            entity.ToTable("TaskSpecificDate", tb => tb.HasTrigger("tr_TaskSpecificDate"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.TaskDate);

            entity.HasOne(d => d.TaskID_FKNavigation).WithMany(p => p.TaskSpecificDates)
                .HasForeignKey(d => d.TaskID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskSpecificDate_Task");
        });

        modelBuilder.Entity<TaskUser>(entity =>
        {
            entity.ToTable("TaskUser", tb => tb.HasTrigger("tr_TaskUser"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.TaskID_FKNavigation).WithMany(p => p.TaskUsers)
                .HasForeignKey(d => d.TaskID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskUser_Task");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.TaskUsers)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskUser_Users");
        });

        modelBuilder.Entity<TaskUserLog>(entity =>
        {
            entity.ToTable("TaskUserLog", tb => tb.HasTrigger("tr_TaskUserLog"));

            entity.HasIndex(e => new { e.StartDate, e.EndDate, e.TaskID_FK }, "IX_TaskUserLog");

            entity.HasIndex(e => e.StartDate, "IX_TaskUserLog_1");

            entity.HasIndex(e => e.EndDate, "IX_TaskUserLog_2");

            entity.HasIndex(e => e.TaskID_FK, "IX_TaskUserLog_3");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.StartDate);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StatusDate);

            entity.HasOne(d => d.TaskID_FKNavigation).WithMany(p => p.TaskUserLogs)
                .HasForeignKey(d => d.TaskID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskUserLog_Task");

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.TaskUserLogs)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskUserLog_Users");
        });

        modelBuilder.Entity<TaskUserLogAttachment>(entity =>
        {
            entity.HasKey(e => e.FileAttachmentID);

            entity.ToTable("TaskUserLogAttachment", tb => tb.HasTrigger("tr_TaskUserLogAttachment"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.TaskUserLogID_FKNavigation).WithMany(p => p.TaskUserLogAttachments)
                .HasForeignKey(d => d.TaskUserLogID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TaskUserLogAttachment_TaskUserLog");
        });

        modelBuilder.Entity<TeleconsultationRecording>(entity =>
        {
            entity.HasKey(e => e.RecordingID);

            entity.ToTable("TeleconsultationRecording", tb => tb.HasTrigger("tr_TeleconsultationRecording"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.EndTime);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Sid)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime);

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.TeleconsultationRecordings)
                .HasForeignKey(d => d.PatientID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeleconsultationRecording_Patient");

            entity.HasOne(d => d.RecordingType_FKNavigation).WithMany(p => p.TeleconsultationRecordings)
                .HasForeignKey(d => d.RecordingType_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeleconsultationRecording_Code");
        });

        modelBuilder.Entity<TeleconsultationReport>(entity =>
        {
            entity.HasKey(e => e.TeleReportID);

            entity.ToTable("TeleconsultationReport", tb => tb.HasTrigger("tr_TeleconsultationReport"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Memo).IsRequired();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Threshold>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Threshol__3213E83F6D225C2D");

            entity.ToTable(tb => tb.HasTrigger("tr_Thresholds"));

            entity.Property(e => e.createdDate);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.maxValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.minValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.name).HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<TreatmentListItem>(entity =>
        {
            entity.HasKey(e => e.TListItemID);

            entity.ToTable("TreatmentListItem", tb => tb.HasTrigger("tr_TreatmentListItem"));

            entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ItemBrand).HasMaxLength(255);
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.TListTypeID_FKNavigation).WithMany(p => p.TreatmentListItems)
                .HasForeignKey(d => d.TListTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentListItem_Code");
        });

        modelBuilder.Entity<TreatmentTOL>(entity =>
        {
            entity.HasKey(e => new { e.TreatmentTOLID, e.TListItemID_FK });

            entity.ToTable("TreatmentTOL", tb => tb.HasTrigger("tr_TreatmentTOL"));

            entity.HasOne(d => d.TListItemID_FKNavigation).WithMany(p => p.TreatmentTOLs)
                .HasForeignKey(d => d.TListItemID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TreatmentTOL_TreatmentListItem");
        });

        modelBuilder.Entity<Type>(entity =>
        {
            entity.HasKey(e => e.code).HasName("PK__Types__357D4CF8F524A549");

            entity.ToTable(tb => tb.HasTrigger("tr_Types"));

            entity.HasIndex(e => new { e.code, e.parentCode }, "idx_Types1");

            entity.Property(e => e.code).HasMaxLength(100);
            entity.Property(e => e.codeValue)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.created);
            entity.Property(e => e.parentCode).HasMaxLength(100);
            entity.Property(e => e.updated);

            entity.HasOne(d => d.parentCodeNavigation).WithMany(p => p.InverseparentCodeNavigation)
                .HasForeignKey(d => d.parentCode)
                .HasConstraintName("fk_Types_parentCode");
        });

        modelBuilder.Entity<UUIDLog>(entity =>
        {
            entity.ToTable("UUIDLog");

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.UUID)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UploadFile>(entity =>
        {
            entity.ToTable("UploadFile", tb => tb.HasTrigger("tr_UploadFile"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.FileName).HasMaxLength(100);
            entity.Property(e => e.FileType).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("tr_Users"));

            entity.Property(e => e.Contact).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.Designation).HasMaxLength(255);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.HasValidEmail).HasDefaultValue(true);
            entity.Property(e => e.LastActivityDate);
            entity.Property(e => e.LastLockoutDate);
            entity.Property(e => e.LastLoginDate);
            entity.Property(e => e.LastLogoutDate);
            entity.Property(e => e.LastPasswordChangedDate);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LocationNow1).HasMaxLength(255);
            entity.Property(e => e.LocationNow2).HasMaxLength(255);
            entity.Property(e => e.LocationNow3).HasMaxLength(255);
            entity.Property(e => e.LocationNowModifiedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Photo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostalCodeNow).HasMaxLength(10);
            entity.Property(e => e.PreviousPasswords).HasMaxLength(1000);
            entity.Property(e => e.PreviousPasswords2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SessionKey).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TokenID).HasMaxLength(20);
            entity.Property(e => e.UserName).HasMaxLength(60);

            entity.HasOne(d => d.PatientID_FKNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.PatientID_FK)
                .HasConstraintName("FK_Users_Patient");

            entity.HasMany(d => d.BranchID_FKs).WithMany(p => p.UserID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserBranch",
                    r => r.HasOne<Branch>().WithMany()
                        .HasForeignKey("BranchID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserBranch_Branch"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserBranch_Users"),
                    j =>
                    {
                        j.HasKey("UserID_FK", "BranchID_FK");
                        j.ToTable("UserBranch", tb => tb.HasTrigger("tr_UserBranch"));
                    });

            entity.HasMany(d => d.CodeID_FKs).WithMany(p => p.UserId_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserOrganization",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserOrganization_Code"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserOrganization_Users"),
                    j =>
                    {
                        j.HasKey("UserId_FK", "CodeID_FK");
                        j.ToTable("UserOrganization", tb => tb.HasTrigger("tr_UserOrganization"));
                    });

            entity.HasMany(d => d.CodeID_FKsNavigation).WithMany(p => p.UserID_FKsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "UserSkillset",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("CodeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserSkillset_Code"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserSkillset_Users"),
                    j =>
                    {
                        j.HasKey("UserID_FK", "CodeID_FK");
                        j.ToTable("UserSkillset", tb => tb.HasTrigger("tr_UserSkillset"));
                    });

            entity.HasMany(d => d.LanguageID_FKs).WithMany(p => p.UserID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserLanguage",
                    r => r.HasOne<Code>().WithMany()
                        .HasForeignKey("LanguageID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserLanguage_Code"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserLanguage_Users"),
                    j =>
                    {
                        j.HasKey("UserID_FK", "LanguageID_FK");
                        j.ToTable("UserLanguage", tb => tb.HasTrigger("tr_UserLanguage"));
                    });

            entity.HasMany(d => d.UserTypeID_FKs).WithMany(p => p.UserID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserUserType",
                    r => r.HasOne<UserType>().WithMany()
                        .HasForeignKey("UserTypeID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserUserType_UserType"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserUserType_Users"),
                    j =>
                    {
                        j.HasKey("UserID_FK", "UserTypeID_FK");
                        j.ToTable("UserUserType", tb => tb.HasTrigger("tr_UserUserType"));
                    });
        });

        modelBuilder.Entity<UserAddress>(entity =>
        {
            entity.HasKey(e => e.UserLocationID);

            entity.ToTable("UserAddress", tb => tb.HasTrigger("tr_UserAddress"));

            entity.Property(e => e.Address1)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.PostalCode).HasMaxLength(255);

            entity.HasOne(d => d.UserID_FKNavigation).WithMany(p => p.UserAddresses)
                .HasForeignKey(d => d.UserID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAddress_Users");
        });

        modelBuilder.Entity<UserCategory>(entity =>
        {
            entity.ToTable("UserCategory", tb => tb.HasTrigger("tr_UserCategory"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserCategory1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserCategory");

            entity.HasOne(d => d.UserCategoryOrganizationID_FKNavigation).WithMany(p => p.UserCategories)
                .HasForeignKey(d => d.UserCategoryOrganizationID_FK)
                .HasConstraintName("FK_UserCategory_UserCategoryOrganizationID_FK");

            entity.HasMany(d => d.ChildUserCategoryID_FKs).WithMany(p => p.ParentUserCategoryID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserCategoryParentChild",
                    r => r.HasOne<UserCategory>().WithMany()
                        .HasForeignKey("ChildUserCategoryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryParentChild_Child"),
                    l => l.HasOne<UserCategory>().WithMany()
                        .HasForeignKey("ParentUserCategoryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryParentChild_Parent"),
                    j =>
                    {
                        j.HasKey("ParentUserCategoryID_FK", "ChildUserCategoryID_FK");
                        j.ToTable("UserCategoryParentChild");
                    });

            entity.HasMany(d => d.FacilityID_FKs).WithMany(p => p.UserCategoryID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserCategoryFacility",
                    r => r.HasOne<Facility>().WithMany()
                        .HasForeignKey("FacilityID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryFacility_Facility"),
                    l => l.HasOne<UserCategory>().WithMany()
                        .HasForeignKey("UserCategoryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryFacility_UserCategory"),
                    j =>
                    {
                        j.HasKey("UserCategoryID_FK", "FacilityID_FK");
                        j.ToTable("UserCategoryFacility");
                    });

            entity.HasMany(d => d.ParentUserCategoryID_FKs).WithMany(p => p.ChildUserCategoryID_FKs)
                .UsingEntity<Dictionary<string, object>>(
                    "UserCategoryParentChild",
                    r => r.HasOne<UserCategory>().WithMany()
                        .HasForeignKey("ParentUserCategoryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryParentChild_Parent"),
                    l => l.HasOne<UserCategory>().WithMany()
                        .HasForeignKey("ChildUserCategoryID_FK")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCategoryParentChild_Child"),
                    j =>
                    {
                        j.HasKey("ParentUserCategoryID_FK", "ChildUserCategoryID_FK");
                        j.ToTable("UserCategoryParentChild");
                    });
        });

        modelBuilder.Entity<UserCategoryRole>(entity =>
        {
            entity.HasKey(e => new { e.UserCategoryID_FK, e.RoleID_FK });

            entity.ToTable("UserCategoryRole", tb => tb.HasTrigger("tr_UserCategoryRole"));

            entity.Property(e => e.Role).IsRequired();

            entity.HasOne(d => d.RoleID_FKNavigation).WithMany(p => p.UserCategoryRoles)
                .HasForeignKey(d => d.RoleID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserCategoryRole_Role");

            entity.HasOne(d => d.UserCategoryID_FKNavigation).WithMany(p => p.UserCategoryRoles)
                .HasForeignKey(d => d.UserCategoryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserCategoryRole_UserCategory");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId_FK, e.RoleId_FK });

            entity.ToTable("UserRole", tb => tb.HasTrigger("tr_UserRole"));

            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");

            entity.HasOne(d => d.RoleId_FKNavigation).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.RoleId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_Role");

            entity.HasOne(d => d.UserId_FKNavigation).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserRole_Users");
        });

        modelBuilder.Entity<UserType>(entity =>
        {
            entity.ToTable("UserType", tb => tb.HasTrigger("tr_UserType"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ManpowerRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.UserType1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UserType");

            entity.HasOne(d => d.UserCategoryID_FKNavigation).WithMany(p => p.UserTypes)
                .HasForeignKey(d => d.UserCategoryID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserType_UserCategory");
        });

        modelBuilder.Entity<VitalSign>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__VitalSig__3213E83F2E0950CF");

            entity.ToTable(tb => tb.HasTrigger("tr_VitalSigns"));

            entity.Property(e => e.createdDate);
            entity.Property(e => e.source)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.updatedDate);

            entity.HasOne(d => d.patient).WithMany(p => p.VitalSigns)
                .HasForeignKey(d => d.patientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSigns_patientId");
        });

        modelBuilder.Entity<VitalSignDetail>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__VitalSig__3213E83FE42362D2");

            entity.ToTable(tb => tb.HasTrigger("tr_VitalSignDetails"));

            entity.Property(e => e.detailValue).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.vitalSign).WithMany(p => p.VitalSignDetails)
                .HasForeignKey(d => d.vitalSignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSignDetails_vitalSignId");

            entity.HasOne(d => d.vitalSignType).WithMany(p => p.VitalSignDetails)
                .HasForeignKey(d => d.vitalSignTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSignDetails_vitalSignTypeId");
        });

        modelBuilder.Entity<VitalSignRelationship>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("tr_VitalSignRelationships"));

            entity.HasOne(d => d.patient).WithMany(p => p.VitalSignRelationships)
                .HasForeignKey(d => d.patientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSignRelationship_patientId");

            entity.HasOne(d => d.threshold).WithMany(p => p.VitalSignRelationships)
                .HasForeignKey(d => d.thresholdId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSignRelationship_thresholdId");

            entity.HasOne(d => d.vitalSignType).WithMany(p => p.VitalSignRelationships)
                .HasForeignKey(d => d.vitalSignTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_VitalSignRelationship_vitalSignTypeId");
        });

        modelBuilder.Entity<VitalSignType>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__VitalSig__3213E83F6F00CA79");

            entity.ToTable(tb => tb.HasTrigger("tr_VitalSignTypes"));

            entity.HasIndex(e => e.name, "idx_VitalSignTypes1");

            entity.Property(e => e.createdDate);
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<VitalSignTypeThreshold>(entity =>
        {
            entity.HasKey(e => e.VitalSignTypeID_FK);

            entity.ToTable("VitalSignTypeThreshold", tb => tb.HasTrigger("tr_VitalSignTypeThreshold"));

            entity.HasIndex(e => e.VitalSignTypeID_FK, "IX_VitalSignTypeThreshold").IsUnique();

            entity.Property(e => e.VitalSignTypeID_FK).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.VitalSignTypeID_FKNavigation).WithOne(p => p.VitalSignTypeThreshold)
                .HasForeignKey<VitalSignTypeThreshold>(d => d.VitalSignTypeID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VitalSignTypeThreshold_VitalSignTypes");
        });

        modelBuilder.Entity<WoundConsolidatedEmail>(entity =>
        {
            entity.ToTable("WoundConsolidatedEmail", tb => tb.HasTrigger("tr_WoundConsolidatedEmail"));

            entity.Property(e => e.CreatedDate);
            entity.Property(e => e.ModifiedDate);

            entity.HasOne(d => d.MailSettingsID_FKNavigation).WithMany(p => p.WoundConsolidatedEmails)
                .HasForeignKey(d => d.MailSettingsID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WoundConsolidatedEmail_MailSettings");

            entity.HasOne(d => d.PatientWoundVisitID_FKNavigation).WithMany(p => p.WoundConsolidatedEmails)
                .HasForeignKey(d => d.PatientWoundVisitID_FK)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WoundConsolidatedEmail_PatientWoundVisit");
        });

        modelBuilder.Entity<WoundUserCategoryParentChild>(entity =>
        {
            entity.HasKey(e => new { e.ParentUserCategoryID_FK, e.ChildUserCategoryID_FK });

            entity.ToTable("WoundUserCategoryParentChild");
        });

        modelBuilder.Entity<vw_AssessmentDue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_AssessmentDue");

            entity.Property(e => e.AssessmentName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DueDate);
            entity.Property(e => e.createdDate);
            entity.Property(e => e.source)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.updatedDate);
        });

        modelBuilder.Entity<vw_CarePlanSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_CarePlanSetup");

            entity.Property(e => e.DiseaseName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.DiseaseSubInfo).HasMaxLength(50);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.System).HasMaxLength(255);
        });

        modelBuilder.Entity<vw_CarePlanSystemDisease>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_CarePlanSystemDisease");
        });

        modelBuilder.Entity<vw_DBSize>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_DBSize");
        });

        modelBuilder.Entity<vw_Doctor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Doctors");

            entity.Property(e => e.DoctorName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<vw_FalangaScore>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_FalangaScores");

            entity.Property(e => e.BlackEschar)
                .IsRequired()
                .HasMaxLength(43)
                .IsUnicode(false);
            entity.Property(e => e.ExudateAmount).HasMaxLength(50);
            entity.Property(e => e.GreatestWoundDepth)
                .IsRequired()
                .HasMaxLength(71)
                .IsUnicode(false);
            entity.Property(e => e.HealingEdges).HasMaxLength(50);
            entity.Property(e => e.PeriwoundCallousFibrosis).HasMaxLength(50);
            entity.Property(e => e.PeriwoundDermatitis).HasMaxLength(50);
            entity.Property(e => e.PinkWoundBed)
                .IsRequired()
                .HasMaxLength(43)
                .IsUnicode(false);
            entity.Property(e => e.patientwoundvisitID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<vw_FalangaScores_WoundDraft>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_FalangaScores_WoundDraft");

            entity.Property(e => e.BlackEschar)
                .IsRequired()
                .HasMaxLength(43)
                .IsUnicode(false);
            entity.Property(e => e.ExudateAmount).HasMaxLength(50);
            entity.Property(e => e.GreatestWoundDepth)
                .IsRequired()
                .HasMaxLength(71)
                .IsUnicode(false);
            entity.Property(e => e.HealingEdges).HasMaxLength(50);
            entity.Property(e => e.PatientWoundDraftID).ValueGeneratedOnAdd();
            entity.Property(e => e.PeriwoundCallousFibrosis).HasMaxLength(50);
            entity.Property(e => e.PeriwoundDermatitis).HasMaxLength(50);
            entity.Property(e => e.PinkWoundBed)
                .IsRequired()
                .HasMaxLength(43)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vw_PatientAllLatestVitalSign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientAllLatestVitalSigns");

            entity.Property(e => e.ThresholdMaxValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ThresholdMinValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Value).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VitalSignDate);
            entity.Property(e => e.VitalSignTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<vw_PatientBilling>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientBilling");

            entity.Property(e => e.BillingAddress1).HasMaxLength(255);
            entity.Property(e => e.BillingAddress2).HasMaxLength(255);
            entity.Property(e => e.BillingAddress3).HasMaxLength(255);
            entity.Property(e => e.BillingPostalCode).HasMaxLength(10);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.PatientName)
                .IsRequired()
                .HasMaxLength(101);
        });

        modelBuilder.Entity<vw_PatientDisease>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientDisease");

            entity.Property(e => e.DiseaseName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.DiseaseSubInfo).HasMaxLength(50);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.System).HasMaxLength(255);
        });

        modelBuilder.Entity<vw_PatientLatestVitalSign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientLatestVitalSigns");

            entity.Property(e => e.ThresholdMaxValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ThresholdMinValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Value).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VitalSignDate);
            entity.Property(e => e.VitalSignTypeName)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ews_max_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_max_7).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_1).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_2).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_3).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_4).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_5).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ews_min_7).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<vw_PatientWound>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientWound");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.NextReviewDate);
            entity.Property(e => e.NextTreatmentDate);
            entity.Property(e => e.Site).IsRequired();
            entity.Property(e => e.Stage).HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.createdBy)
                .IsRequired()
                .HasMaxLength(101);
            entity.Property(e => e.modifiedBy).HasMaxLength(101);
            entity.Property(e => e.patientName).HasMaxLength(255);
        });

        modelBuilder.Entity<vw_PatientWoundImageDownload>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PatientWoundImageDownload");

            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ImageDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ImageUpload)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Site).IsRequired();
            entity.Property(e => e.VisitDate);
        });

        modelBuilder.Entity<vw_PushScore>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PushScores");

            entity.Property(e => e.PatientWoundVisitID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<vw_Teleconsultation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Teleconsultation");

            entity.Property(e => e.EndDate);
            entity.Property(e => e.StartDate);
        });

        modelBuilder.Entity<vw_UserRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_UserRoles");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Firstname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RoleDescription).HasMaxLength(250);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserCategory).HasMaxLength(50);
            entity.Property(e => e.UserType).HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}